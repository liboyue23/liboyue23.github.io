"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _consts = require("../consts");

var _underscore = require("underscore");

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Inject = function () {
  function Inject(hexo, script) {
    _classCallCheck(this, Inject);

    this.hexo = hexo;
    this.script = script;
  }

  _createClass(Inject, [{
    key: "register",
    value: function register() {
      var filter = this.hexo.extend.filter;

      filter.register("after_render:html", this._transform.bind(this));
      filter.register("after_init", this._filterPolyfill.bind(this));
    }
  }, {
    key: "_filterPolyfill",
    value: function _filterPolyfill() {
      var _this = this;

      var hexo = this.hexo;
      var log = hexo.log;
      var extend = hexo.extend;
      var renderer = extend.renderer;

      var _hexo$version$split$m = hexo.version.split(".").map(function (v) {
        return parseInt(v);
      });

      var _hexo$version$split$m2 = _slicedToArray(_hexo$version$split$m, 3);

      var major = _hexo$version$split$m2[0];
      var minor = _hexo$version$split$m2[1];
      var patch = _hexo$version$split$m2[2];

      // Hotfix for hexojs/hexo#1791

      if (major == 3 && minor >= 2) {
        log.info("[hexo-math] installing hotfix for hexojs/hexo#1791");
        _underscore2.default.each(renderer.list(), function (r, name) {
          var compile = r.compile;
          var self = _this;
          if (typeof compile !== 'function') return;
          log.info("[hexo-math] after_render polyfill for renderer '" + name + "'");
          r._rawCompile = compile.bind(r);
          r.compile = function (data) {
            var c = r._rawCompile(data);
            return function (locals) {
              var src = c(locals);
              return self._transform(src);
            };
          };
        });
      }
    }
  }, {
    key: "_transform",
    value: function _transform(src, data) {
      var script = this.script;

      var shouldInject = _consts.BODY_REGEX.test(src) && (src.indexOf(_consts.MATH_MARKER) >= 0 || _consts.INLINE_MATH_REGEX.test(src) || _consts.BLOCK_MATH_REGEX.test(src));
      return shouldInject ? src.replace(_consts.INJECTION_REGEX, "$1" + script.src + "$2") : src;
    }
  }]);

  return Inject;
}();

exports.default = Inject;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlci9pbmplY3QuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBR3FCO0FBQ25CLFdBRG1CLE1BQ25CLENBQVksSUFBWixFQUFrQixNQUFsQixFQUEwQjswQkFEUCxRQUNPOztBQUN4QixTQUFLLElBQUwsR0FBWSxJQUFaLENBRHdCO0FBRXhCLFNBQUssTUFBTCxHQUFjLE1BQWQsQ0FGd0I7R0FBMUI7O2VBRG1COzsrQkFLUjtVQUNILFNBQVcsS0FBSyxJQUFMLENBQVUsTUFBVixDQUFYLE9BREc7O0FBRVQsYUFBTyxRQUFQLENBQWdCLG1CQUFoQixFQUFxQyxLQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBckMsRUFGUztBQUdULGFBQU8sUUFBUCxDQUFnQixZQUFoQixFQUE4QixLQUFLLGVBQUwsQ0FBcUIsSUFBckIsQ0FBMEIsSUFBMUIsQ0FBOUIsRUFIUzs7OztzQ0FLTzs7O0FBQ1osVUFBRSxPQUFTLEtBQVQsSUFBRixDQURZO1VBRVosTUFBZ0IsS0FBaEIsSUFGWTtBQUVkLFVBQU8sU0FBVyxLQUFYLE1BQVAsQ0FGYztBQUdkLFVBQUUsV0FBYSxPQUFiLFFBQUYsQ0FIYzs7a0NBSVUsS0FBSyxPQUFMLENBQWEsS0FBYixDQUFtQixHQUFuQixFQUF3QixHQUF4QixDQUE0QixVQUFDLENBQUQ7ZUFBTyxTQUFTLENBQVQ7T0FBUCxFQUp0Qzs7OztVQUliLGtDQUphO1VBSU4sa0NBSk07VUFJQzs7O0FBSkQ7QUFPaEIsVUFBSSxTQUFTLENBQVQsSUFBYyxTQUFTLENBQVQsRUFBWTtBQUM1QixZQUFJLElBQUosdURBRDRCO0FBRTVCLDZCQUFFLElBQUYsQ0FBTyxTQUFTLElBQVQsRUFBUCxFQUF3QixVQUFDLENBQUQsRUFBSSxJQUFKLEVBQWE7QUFDL0IsY0FBRSxVQUFZLEVBQVosT0FBRixDQUQrQjtBQUVqQywyQkFGaUM7QUFHbkMsY0FBSSxPQUFPLE9BQVAsS0FBbUIsVUFBbkIsRUFBK0IsT0FBbkM7QUFDQSxjQUFJLElBQUosc0RBQTRELFVBQTVELEVBSm1DO0FBS25DLFlBQUUsV0FBRixHQUFnQixRQUFRLElBQVIsQ0FBYSxDQUFiLENBQWhCLENBTG1DO0FBTW5DLFlBQUUsT0FBRixHQUFZLFVBQVMsSUFBVCxFQUFlO0FBQ3pCLGdCQUFJLElBQUksRUFBRSxXQUFGLENBQWMsSUFBZCxDQUFKLENBRHFCO0FBRXpCLG1CQUFPLFVBQVMsTUFBVCxFQUFpQjtBQUN0QixrQkFBSSxNQUFNLEVBQUUsTUFBRixDQUFOLENBRGtCO0FBRXRCLHFCQUFPLEtBQUssVUFBTCxDQUFnQixHQUFoQixDQUFQLENBRnNCO2FBQWpCLENBRmtCO1dBQWYsQ0FOdUI7U0FBYixDQUF4QixDQUY0QjtPQUE5Qjs7OzsrQkFrQlMsS0FBSyxNQUFNO1VBQ2QsU0FBVyxLQUFYLE9BRGM7O0FBRXBCLFVBQUksZUFDRixtQkFBVyxJQUFYLENBQWdCLEdBQWhCLE1BRUEsSUFBSSxPQUFKLHlCQUE0QixDQUE1QixJQUNBLDBCQUFrQixJQUFsQixDQUF1QixHQUF2QixDQURBLElBRUEseUJBQWlCLElBQWpCLENBQXNCLEdBQXRCLENBRkEsQ0FGQSxDQUhrQjtBQVNwQixhQUFPLGVBQWUsSUFBSSxPQUFKLGlDQUFrQyxPQUFPLEdBQVAsT0FBbEMsQ0FBZixHQUNlLEdBRGYsQ0FUYTs7OztTQW5DSCIsImZpbGUiOiJmaWx0ZXIvaW5qZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU5MSU5FX01BVEhfUkVHRVgsIEJMT0NLX01BVEhfUkVHRVgsIEJPRFlfUkVHRVgsIElOSkVDVElPTl9SRUdFWCwgTUFUSF9NQVJLRVIgfSBmcm9tIFwiLi4vY29uc3RzXCI7XHJcbmltcG9ydCBfIGZyb20gXCJ1bmRlcnNjb3JlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmplY3Qge1xyXG4gIGNvbnN0cnVjdG9yKGhleG8sIHNjcmlwdCkge1xyXG4gICAgdGhpcy5oZXhvID0gaGV4bztcclxuICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xyXG4gIH1cclxuICByZWdpc3RlcigpIHtcclxuICAgIGxldCB7IGZpbHRlciB9ID0gdGhpcy5oZXhvLmV4dGVuZDtcclxuICAgIGZpbHRlci5yZWdpc3RlcihcImFmdGVyX3JlbmRlcjpodG1sXCIsIHRoaXMuX3RyYW5zZm9ybS5iaW5kKHRoaXMpKTtcclxuICAgIGZpbHRlci5yZWdpc3RlcihcImFmdGVyX2luaXRcIiwgdGhpcy5fZmlsdGVyUG9seWZpbGwuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG4gIF9maWx0ZXJQb2x5ZmlsbCgpIHtcclxuICAgIGxldCB7IGhleG8gfSA9IHRoaXMsXHJcbiAgICAgIHsgbG9nLCBleHRlbmQgfSA9IGhleG8sXHJcbiAgICAgIHsgcmVuZGVyZXIgfSA9IGV4dGVuZCxcclxuICAgICAgW21ham9yLCBtaW5vciwgcGF0Y2hdID0gaGV4by52ZXJzaW9uLnNwbGl0KFwiLlwiKS5tYXAoKHYpID0+IHBhcnNlSW50KHYpKTtcclxuXHJcbiAgICAvLyBIb3RmaXggZm9yIGhleG9qcy9oZXhvIzE3OTFcclxuICAgIGlmIChtYWpvciA9PSAzICYmIG1pbm9yID49IDIpIHtcclxuICAgICAgbG9nLmluZm8oYFtoZXhvLW1hdGhdIGluc3RhbGxpbmcgaG90Zml4IGZvciBoZXhvanMvaGV4byMxNzkxYCk7XHJcbiAgICAgIF8uZWFjaChyZW5kZXJlci5saXN0KCksIChyLCBuYW1lKSA9PiB7XHJcbiAgICAgICAgbGV0IHsgY29tcGlsZSB9ID0gcixcclxuICAgICAgICAgIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29tcGlsZSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG4gICAgICAgIGxvZy5pbmZvKGBbaGV4by1tYXRoXSBhZnRlcl9yZW5kZXIgcG9seWZpbGwgZm9yIHJlbmRlcmVyICcke25hbWV9J2ApO1xyXG4gICAgICAgIHIuX3Jhd0NvbXBpbGUgPSBjb21waWxlLmJpbmQocik7XHJcbiAgICAgICAgci5jb21waWxlID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgbGV0IGMgPSByLl9yYXdDb21waWxlKGRhdGEpO1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xyXG4gICAgICAgICAgICBsZXQgc3JjID0gYyhsb2NhbHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fdHJhbnNmb3JtKHNyYyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgX3RyYW5zZm9ybShzcmMsIGRhdGEpIHtcclxuICAgIGxldCB7IHNjcmlwdCB9ID0gdGhpcztcclxuICAgIGxldCBzaG91bGRJbmplY3QgPVxyXG4gICAgICBCT0RZX1JFR0VYLnRlc3Qoc3JjKSAgICAgICAgICAmJlxyXG4gICAgICAoXHJcbiAgICAgIHNyYy5pbmRleE9mKE1BVEhfTUFSS0VSKSA+PSAwIHx8XHJcbiAgICAgIElOTElORV9NQVRIX1JFR0VYLnRlc3Qoc3JjKSAgIHx8XHJcbiAgICAgIEJMT0NLX01BVEhfUkVHRVgudGVzdChzcmMpXHJcbiAgICAgICk7XHJcbiAgICByZXR1cm4gc2hvdWxkSW5qZWN0ID8gc3JjLnJlcGxhY2UoSU5KRUNUSU9OX1JFR0VYLCBgJDEke3NjcmlwdC5zcmN9JDJgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHNyYztcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
