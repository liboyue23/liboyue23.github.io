{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/js/totop.js","path":"js/totop.js","modified":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/search.png","path":"img/search.png","modified":1},{"_id":"themes/yilia/source/img/scrollup.png","path":"img/scrollup.png","modified":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"source/assets/me.jpg","path":"assets/me.jpg","modified":1},{"_id":"source/CNAME","path":"CNAME","modified":1}],"Cache":[{"_id":"source/404.html","shasum":"2ecae9d205948a29b991d1cf179445b37a988e4f","modified":1433748859000},{"_id":"source/_posts/2015年总结.md","shasum":"be1720620ab48ee1819da05c34a969bb28f07ce8","modified":1457509926000},{"_id":"source/CNAME","shasum":"af077ca9c2f06f2cd9b812aec5c076e19169c32a","modified":1433509162000},{"_id":"source/_posts/2015开源中国年终盛典.md","shasum":"49bb85809fa30d8b5e79b9972145959c6db0a89e","modified":1457510652000},{"_id":"source/_posts/2016年目标与计划.md","shasum":"658b145919b3c91ae377ce68e6a03f6de85c3dca","modified":1456916319000},{"_id":"source/_posts/7年老人谈些新人成长经验.md","shasum":"97d99a26e8cf17e5a92050116d8d0e9277c417af","modified":1462454700000},{"_id":"source/_posts/Guava库介绍之集合相关的API.md","shasum":"14204f76ed031c953ea230dd221fca230dd6dc70","modified":1459427132000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/AVG.jpeg","shasum":"08fc4e6e37023609cc307161806214f089fa17fd","modified":1460531400000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/COUNT.jpeg","shasum":"f46a321d0f846690f019e73752431b8ddd422c49","modified":1460529692000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/MAX.jpeg","shasum":"40a9ef3099bd82f0a4d94bd9e0cb0c7e19bc089b","modified":1460529921000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/COUNT_DISTICT.jpeg","shasum":"ccc4d8a5f5f47f8ce1d444fc310b9f962c3d9952","modified":1460529829000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列.md","shasum":"df73397eb16911661bd5cbfff08dd3f266bed363","modified":1462454684000},{"_id":"source/_posts/apache-包使用.md","shasum":"3b51aac19e6831b2022a8314ef54cf8449b42bf9","modified":1472618687000},{"_id":"source/_posts/zookeeper集群初识.md","shasum":"9e69e85c4b32a85a431f06c8df270478a2694704","modified":1456904548000},{"_id":"source/_posts/一些插件.md","shasum":"f9cf8dea753b32232ab53e09ae15f9d2876e4681","modified":1459610732000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/MIN.jpeg","shasum":"d000a9c823da5f1320a996fecb83198c38183999","modified":1460530598000},{"_id":"source/_posts/互联网金融体系.md","shasum":"264752ca6e40e0179e806167d238d8d275355918","modified":1457509903000},{"_id":"source/_posts/分布式技术架构.md","shasum":"9ee66a66f82b717bdfb0ae9a9d74ab6f7d768b70","modified":1457510600000},{"_id":"source/_posts/如何搭建个人博客.md","shasum":"50f961c2a8fafd1a008f103b898a235e8f96ef27","modified":1457510565000},{"_id":"source/_posts/如何读源码.md","shasum":"f0dd283371e50b3e7e80bdc77267589e918d3949","modified":1457509949000},{"_id":"source/_posts/存储知识学习.md","shasum":"4bd8584f36a0d4b1bd6bd9c88eb5f42c2fe09c38","modified":1457510593000},{"_id":"source/_posts/期盼已久的offer.md","shasum":"910fdadfe54fe6f134347e6a54921b4bece13acb","modified":1457510003000},{"_id":"source/_posts/索引结构以及加锁理解.md","shasum":"f3ca204248c6a546de9b150557fdb95b10152331","modified":1457510541000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/SUM.jpeg","shasum":"e236190740716e35eb57e998e9733e83197294db","modified":1460529564000},{"_id":"source/_posts/红烧鲈鱼.md","shasum":"47277635ccd749f9243fe9b66efe11ef46b71873","modified":1457510011000},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/virtual_index.jpeg","shasum":"fb644f24ffef6711a6c67a1f3247070c05594694","modified":1460531677000},{"_id":"source/_posts/网络通讯.md","shasum":"87150706f3ef54db43942bbd955766282cb70228","modified":1457510574000},{"_id":"source/_posts/要做的一些事情.md","shasum":"6fa9ec1ada5b168a2aa4864fb152c578e60c904a","modified":1457510028000},{"_id":"source/about/index.md","shasum":"bc4b0fc9c562ecb4ff3501b0b08857acab13192f","modified":1457506463000},{"_id":"source/_posts/互联网金融体系/互联网金融.jpg","shasum":"072f7fedf6787dbe51715e92b1b2aa1a8f97b3c9","modified":1456919191000},{"_id":"source/instagram/index.md","shasum":"66ed651a3746f0b4fde4ab82669e65e24c51bacd","modified":1457266012000},{"_id":"source/search/index.md","shasum":"c735c9d04c1b37ba83da10e7178954ae216ab5b8","modified":1456985353000},{"_id":"source/assets/me.jpg","shasum":"f1295ee2ae34cf04d9c7641d9e200368e564ef68","modified":1456824489000},{"_id":"source/_posts/网络通讯/网络通信.jpg","shasum":"1e9202323430334576a50f1add934357c71a41c2","modified":1456825401000},{"_id":"source/_posts/2015开源中国年终盛典/osc_1.jpg","shasum":"3fd51b18bce6605677d63b1d4410831d65029993","modified":1456824481000},{"_id":"source/_posts/2015开源中国年终盛典/osc_3.jpg","shasum":"ed1d9908a133d8a411514419611862fcd426b757","modified":1456824477000},{"_id":"source/_posts/2015开源中国年终盛典/osc_2.jpg","shasum":"275e06f280d2f529f0552d5ae7fdd9cfb6c846f3","modified":1456824479000},{"_id":"themes/yilia/_config.yml","shasum":"8676367ae6e1b4b3b4b12009f005ce81c1a44aba","modified":1458636354000},{"_id":"themes/yilia/languages/de.yml","shasum":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1456833816000},{"_id":"themes/yilia/languages/default.yml","shasum":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1456833816000},{"_id":"themes/yilia/languages/en.yml","shasum":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1456833816000},{"_id":"themes/yilia/languages/fr-FR.yml","shasum":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1456833816000},{"_id":"themes/yilia/languages/ru.yml","shasum":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1456833816000},{"_id":"themes/yilia/languages/zh-Hans.yml","shasum":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1456833816000},{"_id":"themes/yilia/languages/zh-hk.yml","shasum":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1456833816000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1456833816000},{"_id":"themes/yilia/languages/zh-tw.yml","shasum":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1456833816000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"323513eb375bc3afcd205f698b3215ecb96e531e","modified":1456912615000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1456833816000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"70fa2b01791784b8c1843451382482c7e15f4cef","modified":1456910802000},{"_id":"themes/yilia/layout/_partial/baidu_tongji.ejs","shasum":"84202de1f3e9a1b6d0897fe183588a640d8b5142","modified":1457511649000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"ddb8683214c3286f9b75fe3b779d39101ca92704","modified":1456984819000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"bde4c594ee151c4eb0982bae11f6277a66d81495","modified":1457511855000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"f3197d344cf1444b052d5a331fd8ff4fbd14ce20","modified":1456831074000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"e0c8c7e2bae1c8ced0d64f87ff79fa9969e803fe","modified":1456984787000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1456833816000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1456833816000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","shasum":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1456833816000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","shasum":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1456833816000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1433509541000},{"_id":"themes/yilia/layout/_partial/post/toc.ejs","shasum":"aed4f089de3450d322c41c68fd741b3af560fd79","modified":1456890577000},{"_id":"themes/yilia/layout/_partial/search.ejs","shasum":"cc1cf53b5c9fcb51f8eb64236a6c669fcd973ecc","modified":1456985284000},{"_id":"themes/yilia/layout/_partial/totop.ejs","shasum":"bcc062914bb08e657aaafb2f28758020f1b4e30a","modified":1456912477000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1433509541000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1433509541000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1433509541000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1433509541000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456890210000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456890291000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1433509541000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1433509541000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1433509541000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1433509541000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"d5ef0a7574684d6303eb6f3de5c3b0689752e8b2","modified":1457004774000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1433509541000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1433509541000},{"_id":"themes/yilia/source/css/_partial/photo.styl","shasum":"a13ca0859a2c8f914bbaf741e94e7c7724e98ba2","modified":1433667401000},{"_id":"themes/yilia/source/css/_partial/search.styl","shasum":"73b708bbf52ce0df93a6d139bdfc41c80205e341","modified":1456984997000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1433509541000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1456833816000},{"_id":"themes/yilia/source/css/_partial/toc.styl","shasum":"51dbd316b7a26e3424f18d1cb11a7fa290e34daf","modified":1456911673000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1433509541000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1433509541000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1433509541000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1433509541000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1433509541000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1433509541000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1433509541000},{"_id":"themes/yilia/source/css/style.styl","shasum":"4c381f796dfaa998f4d5f372d485ee39419bdf1e","modified":1456985023000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1433509541000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1433509541000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1433509541000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1433509541000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1433509541000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1433509541000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1433509541000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1433509541000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1433509541000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1433509541000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1433509541000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1433509541000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1433509541000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1433509541000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1433509541000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1433509541000},{"_id":"themes/yilia/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1456912624000},{"_id":"themes/yilia/source/img/search.png","shasum":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1456914766000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1433509541000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1433509541000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1433509541000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"dd02585f57c4ffb0f2fd722a652a3b1079da03b4","modified":1457274964000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1433509541000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1433509541000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1456833816000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1456833816000},{"_id":"themes/yilia/source/js/totop.js","shasum":"ffa110a8fba4ab978014f7d57bc26eb1fe306147","modified":1456912574000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1456833816000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1433509541000},{"_id":"source/_posts/红烧鲈鱼/yu.jpg","shasum":"a002546cf28f055cad13b6d4006d717d4926f32f","modified":1456824487000},{"_id":"public/js/totop.js","modified":1482036515090,"shasum":"ffa110a8fba4ab978014f7d57bc26eb1fe306147"},{"_id":"public/js/pc.js","modified":1482036515096,"shasum":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10"},{"_id":"public/js/mobile.js","modified":1482036515098,"shasum":"b68cc01d24e80973c48205f551da87f3f3427644"},{"_id":"public/js/main.js","modified":1482036515102,"shasum":"0640b68a76fab3c693b3cd1e4d04d14be1e53940"},{"_id":"public/js/jquery.lazyload.js","modified":1482036515105,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1482036515108,"shasum":"bf5f3db1abb77a543dc8fae23818754176d589de"},{"_id":"public/img/zhihu.png","modified":1482036515113,"shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d"},{"_id":"public/img/weibo.png","modified":1482036515116,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1482036515120,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/img/stackoverflow.png","modified":1482036515123,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/search.png","modified":1482036515127,"shasum":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd"},{"_id":"public/img/scrollup.png","modified":1482036515130,"shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3"},{"_id":"public/img/scrollbar_arrow.png","modified":1482036515131,"shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0"},{"_id":"public/img/rss.png","modified":1482036515133,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1482036515135,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1482036515137,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/mail.png","modified":1482036515139,"shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7"},{"_id":"public/img/linkedin.png","modified":1482036515141,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1482036515143,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1482036515146,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1482036515150,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1482036515155,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1482036515159,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/douban.png","modified":1482036515162,"shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e"},{"_id":"public/img/delicious.png","modified":1482036515165,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1482036515167,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1482036515173,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1482036515183,"shasum":"a82597493d75ea989ca586e09173cff332efe41e"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1482036515188,"shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1482036515191,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1482036515196,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1482036515199,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1482036515201,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1482036515205,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1482036515209,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1482036515212,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1482036515216,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1482036515220,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1482036515225,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1482036515228,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1482036515231,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1482036515947,"shasum":"f6bcc6b909119e0ba7504b9f4ec822c8527eb24a"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1482036516180,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1482036516184,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1482036516187,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1482036516189,"shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1482036516193,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/assets/me.jpg","modified":1482036516196,"shasum":"f1295ee2ae34cf04d9c7641d9e200368e564ef68"},{"_id":"public/CNAME","modified":1482036516199,"shasum":"af077ca9c2f06f2cd9b812aec5c076e19169c32a"},{"_id":"public/2016/03/01/网络通讯/网络通信.jpg","modified":1482036516202,"shasum":"1e9202323430334576a50f1add934357c71a41c2"},{"_id":"public/2015/06/21/红烧鲈鱼/yu.jpg","modified":1482036516212,"shasum":"a002546cf28f055cad13b6d4006d717d4926f32f"},{"_id":"public/2016/03/02/互联网金融体系/互联网金融.jpg","modified":1482036516218,"shasum":"072f7fedf6787dbe51715e92b1b2aa1a8f97b3c9"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/AVG.jpeg","modified":1482036516256,"shasum":"08fc4e6e37023609cc307161806214f089fa17fd"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/COUNT.jpeg","modified":1482036516263,"shasum":"f46a321d0f846690f019e73752431b8ddd422c49"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/COUNT_DISTICT.jpeg","modified":1482036516268,"shasum":"ccc4d8a5f5f47f8ce1d444fc310b9f962c3d9952"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/MAX.jpeg","modified":1482036516274,"shasum":"40a9ef3099bd82f0a4d94bd9e0cb0c7e19bc089b"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/MIN.jpeg","modified":1482036516278,"shasum":"d000a9c823da5f1320a996fecb83198c38183999"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/SUM.jpeg","modified":1482036516281,"shasum":"e236190740716e35eb57e998e9733e83197294db"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/virtual_index.jpeg","modified":1482036516283,"shasum":"fb644f24ffef6711a6c67a1f3247070c05594694"},{"_id":"public/2015/12/13/2015开源中国年终盛典/osc_1.jpg","modified":1482036516287,"shasum":"3fd51b18bce6605677d63b1d4410831d65029993"},{"_id":"public/2015/12/13/2015开源中国年终盛典/osc_2.jpg","modified":1482036516294,"shasum":"275e06f280d2f529f0552d5ae7fdd9cfb6c846f3"},{"_id":"public/2015/12/13/2015开源中国年终盛典/osc_3.jpg","modified":1482036516297,"shasum":"ed1d9908a133d8a411514419611862fcd426b757"},{"_id":"public/404.html","modified":1482036516410,"shasum":"d27d4b321a4a24e6fcf982f6286774937feaa410"},{"_id":"public/search/index.html","modified":1482036516464,"shasum":"8606a012df4f8c8a50f10c8e66ede0e9f07ae273"},{"_id":"public/instagram/index.html","modified":1482036516535,"shasum":"0d18b83deeba2bdfe21181a6939e3406b7378be0"},{"_id":"public/about/index.html","modified":1482036516586,"shasum":"557b63961446a6d30c1863204814f0cb1a3ed1c7"},{"_id":"public/2016/08/30/apache-包使用/index.html","modified":1482036516655,"shasum":"68a0586165affc31a7af25156c3acec74ca01bb3"},{"_id":"public/2016/05/05/7年老人谈些新人成长经验/index.html","modified":1482036516731,"shasum":"0afe7266d5a3a5180cce7def23e4b622c8fb7d60"},{"_id":"public/2016/04/13/Mysql5-7新特性之json与虚拟索引列/index.html","modified":1482036516817,"shasum":"beedf2e337d455822e30e8a427e12b3ad42ea471"},{"_id":"public/2016/03/31/Guava库介绍之集合相关的API/index.html","modified":1482036516892,"shasum":"6da32e39cfec6f74e7ae7dc369472d99b640b1d0"},{"_id":"public/2016/03/09/索引结构以及加锁理解/index.html","modified":1482036516994,"shasum":"dc3fb6b3121afe454a6c3e01c4e5d0dfa9b28570"},{"_id":"public/2016/03/07/一些插件/index.html","modified":1482036517051,"shasum":"04605c6bc9ac07547778d8829e35e1678066dc6c"},{"_id":"public/2016/03/04/期盼已久的offer/index.html","modified":1482036517100,"shasum":"e85992e7eea0a5191bbdc846700b8de8993c573b"},{"_id":"public/2016/03/02/互联网金融体系/index.html","modified":1482036517182,"shasum":"64ea700654281cecdb7fbc004f0f3abf853c97f9"},{"_id":"public/2016/03/01/网络通讯/index.html","modified":1482036517247,"shasum":"1fa871336aa4d7392dfc34262ca48e2602884a73"},{"_id":"public/2016/03/01/要做的一些事情/index.html","modified":1482036517306,"shasum":"311c2efc7d060dc52e09c75678d222f0b30b4816"},{"_id":"public/2016/03/01/存储知识学习/index.html","modified":1482036517396,"shasum":"73c4439c35ab6eb64999247c56547f05b33caa5f"},{"_id":"public/2016/01/01/2016年目标与计划/index.html","modified":1482036517451,"shasum":"c9717ed8ef566fdec1a3368c4ce4136790d72b3c"},{"_id":"public/2015/12/31/2015年总结/index.html","modified":1482036517526,"shasum":"a17e4779f2aee66ff2fa390fb7d7cf219169915d"},{"_id":"public/2015/12/13/2015开源中国年终盛典/index.html","modified":1482036517601,"shasum":"3fdc5368af048397c7a68e196f528dbdcbabd82e"},{"_id":"public/2015/09/12/如何读源码/index.html","modified":1482036517614,"shasum":"1b56d81ddab273d1d94addf36fae77a0aeba9c81"},{"_id":"public/2015/06/26/分布式技术架构/index.html","modified":1482036517637,"shasum":"5325f79387f1aee269a92f708ab553e4505e8ba0"},{"_id":"public/2015/06/21/红烧鲈鱼/index.html","modified":1482036517646,"shasum":"6165d521a6811c619936bf825f949ec4cc0c066e"},{"_id":"public/2015/06/17/zookeeper集群初识/index.html","modified":1482036517656,"shasum":"985eb3457add514276b6620d7ce6fd3f88fb360e"},{"_id":"public/2015/06/07/如何搭建个人博客/index.html","modified":1482036517670,"shasum":"32a5691dcf9933a326b21bd5e8b9b5b2725d9d37"},{"_id":"public/archives/index.html","modified":1482036517689,"shasum":"bae194ef03e8a4e609a1f796dd7f3e4e50924e5c"},{"_id":"public/archives/page/2/index.html","modified":1482036517701,"shasum":"6569e7b1b8894ab95d6b76309dff54c0f149f99d"},{"_id":"public/archives/page/3/index.html","modified":1482036517717,"shasum":"95872363abd9c553ea93b0d33929980fa86634cc"},{"_id":"public/archives/page/4/index.html","modified":1482036517732,"shasum":"b37767fa1b44ac2a1befddffd094e819d90c6e61"},{"_id":"public/archives/2015/index.html","modified":1482036517753,"shasum":"1f0a42d114e3c788df25f1c7667c88fb073fa18b"},{"_id":"public/archives/2015/page/2/index.html","modified":1482036517764,"shasum":"2634056e16302d8f3df6d33ea0f73454977d45c7"},{"_id":"public/archives/2015/06/index.html","modified":1482036517775,"shasum":"a1e84be9f0c7668afd92a286c0a59a500d0c2f8f"},{"_id":"public/archives/2015/09/index.html","modified":1482036517785,"shasum":"20180949811334ee89fd1d7fbd873f301ee55189"},{"_id":"public/archives/2015/12/index.html","modified":1482036517797,"shasum":"f0e542ade7585954fafdde92f6b75e323a386082"},{"_id":"public/archives/2016/index.html","modified":1482036517811,"shasum":"4933b23afd41ee9a07917f830aea113dbb1f373c"},{"_id":"public/archives/2016/page/2/index.html","modified":1482036517824,"shasum":"70feddfba1ef33124ac6bcb7bf555edb18c9a033"},{"_id":"public/archives/2016/page/3/index.html","modified":1482036517831,"shasum":"df621f37e1d7a7af8168a6caa7c8e43767978405"},{"_id":"public/archives/2016/01/index.html","modified":1482036517838,"shasum":"f8a113c521de1d799a720d7b99c7bed89951aef1"},{"_id":"public/archives/2016/03/index.html","modified":1482036517854,"shasum":"fcf28f249802b9dadfd0ac805db2dffe11b8ae69"},{"_id":"public/archives/2016/03/page/2/index.html","modified":1482036517865,"shasum":"903c8ea523fa99975afa2b59c08de1637eb0375f"},{"_id":"public/archives/2016/04/index.html","modified":1482036517872,"shasum":"d5fbb19b0092a2ef33e5a9f19d151499b698c7ff"},{"_id":"public/archives/2016/05/index.html","modified":1482036517886,"shasum":"754e459af1f74e058e67be8632926bbaa389aa0c"},{"_id":"public/archives/2016/08/index.html","modified":1482036517891,"shasum":"4875dd47a903b6747afe9a17a11ac697742f976a"},{"_id":"public/categories/技术/index.html","modified":1482036517905,"shasum":"c55eaddc01cf499d439cc6455342602fbf5d4e39"},{"_id":"public/categories/技术/page/2/index.html","modified":1482036517922,"shasum":"0ab539ad4609d29124420ca185f90b47d2fd92a8"},{"_id":"public/categories/技术/page/3/index.html","modified":1482036517929,"shasum":"ffecaf98681f71959b020689ac893ab5ad0675ef"},{"_id":"public/categories/生活/index.html","modified":1482036517939,"shasum":"48aa3316837ad14e9b706b6c2e1e9faf645c673a"},{"_id":"public/categories/职业/index.html","modified":1482036517947,"shasum":"565266919e69b0bd5d04d38345d150adcebbae74"},{"_id":"public/douban/index.html","modified":1482036517955,"shasum":"231dfa3b86ffdb8c67d2fcdf845c59805d9c92e8"},{"_id":"public/atom.xml","modified":1482036517961,"shasum":"7580e9fb4eb12c8fc8d83b527b758d1e311d287a"},{"_id":"public/index.html","modified":1482036517982,"shasum":"e83bd775e19d6f670b99d8b12c45ef504217be13"},{"_id":"public/page/2/index.html","modified":1482036517996,"shasum":"0bc9b3fee3abbfa797b8c0517af56315d6a3baca"},{"_id":"public/page/3/index.html","modified":1482036518015,"shasum":"0d792ecd2aafcecbd930227371b8fb1a80875b84"},{"_id":"public/page/4/index.html","modified":1482036518026,"shasum":"92c184dbef2607997b02ad1594f95c953157a1b2"},{"_id":"public/sitemap.xml","modified":1482036518028,"shasum":"3f74360103c86791888194a012abecfc01c23fcb"},{"_id":"public/tags/随笔/index.html","modified":1482036518041,"shasum":"6a640487a2d5709ffa192108aa841a7da06cb54c"},{"_id":"public/tags/java/index.html","modified":1482036518052,"shasum":"644d5f80b329fdd7c7294ff05afa1ad4cb455125"},{"_id":"public/tags/网络/index.html","modified":1482036518058,"shasum":"d72441ced18704c1c8186dd082d993e34f0900cd"},{"_id":"public/tags/通讯/index.html","modified":1482036518067,"shasum":"6274e915391e99c76ac4417e3afe8d4f7143e5b5"},{"_id":"public/tags/家常菜/index.html","modified":1482036518077,"shasum":"32f1f94cdf98f87b73da21ba5b9972192b48c5d7"},{"_id":"public/tags/海鲜/index.html","modified":1482036518085,"shasum":"887a7f637261a628a3af1497284e6ba2fbe57be1"},{"_id":"public/tags/MySQL/index.html","modified":1482036518094,"shasum":"1362ba0367fb0e5f70e67ba565ca04afb031660e"},{"_id":"public/tags/索引/index.html","modified":1482036518102,"shasum":"f07c7c6c3f459d75074baed78eeb03ac0dbd8fd1"},{"_id":"public/tags/性能优化/index.html","modified":1482036518110,"shasum":"d2f1871ec0e10547ec72e1996e156f14eea844b7"},{"_id":"public/tags/树/index.html","modified":1482036518119,"shasum":"8586f14d7fa57b7bad820cc9f5adc332332801e8"},{"_id":"public/tags/阿里巴巴/index.html","modified":1482036518130,"shasum":"2571722d8b6e6660a88b78177310dc0bb41f41b0"},{"_id":"public/tags/存储/index.html","modified":1482036518138,"shasum":"1e53507e3c2caacee626a3faf499863520e4df47"},{"_id":"public/tags/心得/index.html","modified":1482036518150,"shasum":"e2653fd1c827b80b5497062c5ac004cb6a08551e"},{"_id":"public/tags/hexo/index.html","modified":1482036518160,"shasum":"8e35bbf4a2ed93e6f71ae8fda4b9279b2692be79"},{"_id":"public/tags/分布式/index.html","modified":1482036518172,"shasum":"e6ec25e069cfca0a61f6d1d9e5af784d24066605"},{"_id":"public/tags/脑图/index.html","modified":1482036518182,"shasum":"dd261b3829f86e1cacecb767f2f4351ae4f49287"},{"_id":"public/tags/互联网金融/index.html","modified":1482036518195,"shasum":"69611b1be68ef87f63735fa07d01a9887e8c4fcd"},{"_id":"public/tags/plugins/index.html","modified":1482036518204,"shasum":"a618203ba8ac8c6fcde678d984145cacc0f150bc"},{"_id":"public/tags/zookeeper/index.html","modified":1482036518213,"shasum":"ea0cfcd277ccbddd39fc9aca8f745ecb743b757a"},{"_id":"public/tags/commons/index.html","modified":1482036518221,"shasum":"1659a3e992649089ccd7e6d9184c5ff35e014b72"},{"_id":"public/tags/mysql/index.html","modified":1482036518231,"shasum":"0232aed114dcedd13800cf596f426514a26fc47c"},{"_id":"public/tags/json/index.html","modified":1482036518237,"shasum":"87100a2378b68f5090fec2b83d54e406ebbd4ccc"},{"_id":"public/tags/Guava/index.html","modified":1482036518245,"shasum":"7d3fea7768ca7800a74eb10a3bdb51f070806540"},{"_id":"public/tags/工具/index.html","modified":1482036518251,"shasum":"e4c02c41910af9ae33ea1b16ce78c69380b81a3b"},{"_id":"public/tags/技术/index.html","modified":1482036518256,"shasum":"a104e0322d23501ae294b0f511e42ea24ea87e1b"},{"_id":"public/tags/技术交流/index.html","modified":1482036518263,"shasum":"16b4af74a526da6d6fd2ee9d665d6480c21d6318"},{"_id":"public/hexo-github/style.css","modified":1482036518333,"shasum":"040d2164f47317c073839c0a009df1bbaf7ce73e"},{"_id":"public/hexo-github/badge.js","modified":1482036518370,"shasum":"6d3f655283d436463795206c340c5c9eaf60e928"},{"_id":"public/hexo-github/octicons/octicons.css","modified":1482036518374,"shasum":"2e624d974f3c3b0ce0fad2140b7e5c3916e596e9"},{"_id":"public/hexo-github/octicons/octicons.eot","modified":1482036518377,"shasum":"97b771268cf129ea68bfe2ec5ebf2c895130a9ad"},{"_id":"public/hexo-github/octicons/octicons.svg","modified":1482036518381,"shasum":"7fec5faf4a16349c6dd04beddd0557b0165a108f"},{"_id":"public/hexo-github/octicons/octicons.ttf","modified":1482036518387,"shasum":"fcbb64dc4078d9d7273851bb0d6cc938ca4b14bd"},{"_id":"public/hexo-github/octicons/octicons.woff","modified":1482036518389,"shasum":"734acee6c9824647554e435b022ce36d546f8440"},{"_id":"public/assets/css/APlayer.min.css","modified":1482036518396,"shasum":"84f2abb96cf392b8d7a2ce863774f725a752bce2"},{"_id":"public/assets/js/APlayer.min.js","modified":1482036518400,"shasum":"ebfaef090b9e0f8c552a10c340c3ec88e34dae28"},{"_id":"public/assets/css/default.jpg","modified":1482036518403,"shasum":"0d79ef4a622b2c26e92dc16341ba1f2c4695fa73"},{"_id":"public/assets/css/font/aplayer-fontello.woff","modified":1482036518406,"shasum":"373f6a91bf3d200c31d43bc78be7d23b5a81f95e"}],"Category":[{"name":"技术","_id":"ciwu69vkf0005cn8esj7mhbuc"},{"name":"生活","_id":"ciwu69vks000icn8emw9g453g"},{"name":"职业","_id":"ciwu69vl2000zcn8ejlosk939"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n\t<head>\n　　\t\t<meta charset=\"UTF-8\">\n　　\t\t<title>{Do Someting} | 404</title>\n\t\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n　　\t</head>\n\t<body>\n\t</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n\t<head>\n　　\t\t<meta charset=\"UTF-8\">\n　　\t\t<title>{Do Someting} | 404</title>\n\t\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n　　\t</head>\n\t<body>\n\t</body>\n</html>","date":"2016-03-07T07:21:11.000Z","updated":"2015-06-08T07:34:19.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciwu69vk20000cn8e5q7ssr7r"},{"layout":"search","title":"正在努力搜索中...","toc":false,"comments":0,"_content":"<div id=\"st-results-container\" class=\"st-search-container\">\n</div>","source":"search/index.md","raw":"layout: search\ntitle: 正在努力搜索中...\ntoc: false\ncomments: false\n----\n<div id=\"st-results-container\" class=\"st-search-container\">\n</div>","date":"2016-03-07T07:21:11.000Z","updated":"2016-03-03T06:09:13.000Z","path":"search/index.html","_id":"ciwu69vk50001cn8etbgwpj19"},{"layout":"post","slug":"instagram","title":"相册","noDate":"true","_content":"\n<div class=\"instagram\" data-client-id=\"73fd6801acc0428587ecf40e9457a5d6\" data-user-id=\"1174531866\">\n    <a href=\"http://instagram.com/liboyue\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","source":"instagram/index.md","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\n---\n\n<div class=\"instagram\" data-client-id=\"73fd6801acc0428587ecf40e9457a5d6\" data-user-id=\"1174531866\">\n    <a href=\"http://instagram.com/liboyue\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","date":"2016-03-07T07:21:11.000Z","updated":"2016-03-06T12:06:52.000Z","path":"instagram/index.html","comments":1,"_id":"ciwu69vk60002cn8eos4si27o"},{"title":"about","date":"2016-03-03T11:41:04.000Z","toc":false,"_content":"\"李博越\".equals (\"程序员\".append(\"运动员\"))\n\n##Gmail\nliboyue23@gmail.com\n\n##Education\n2010 - 2014 天津理工大学，本科，软件工程\n\n##Work Experiences\n**融宝支付**\n2013.11 - 2015.3\n软件开发工程师\n\n**美丽说**\n2015.3 - 至今\n","source":"about/index.md","raw":"title: about\ndate: 2016-03-03 19:41:04\ntoc: false\n---\n\"李博越\".equals (\"程序员\".append(\"运动员\"))\n\n##Gmail\nliboyue23@gmail.com\n\n##Education\n2010 - 2014 天津理工大学，本科，软件工程\n\n##Work Experiences\n**融宝支付**\n2013.11 - 2015.3\n软件开发工程师\n\n**美丽说**\n2015.3 - 至今\n","updated":"2016-03-09T06:54:23.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciwu69vk80003cn8eq6ilfue2"}],"Post":[{"title":"要做的一些事情","date":"2016-03-01T07:40:08.000Z","toc":false,"_content":"\n存储知识学习\n\n今年3月份又换了工作，还是坚持技术为主，技术和业务相结合并行提升\n\n读书与博客，还有issue，刷leetcode\n\n开始使用脑图规划自己学习路线与专业方向\n\n一次旅游，普吉岛\n\n期望\n","source":"_posts/要做的一些事情.md","raw":"title: 要做的一些事情\ndate: 2016-03-01 15:40:08\ncategories: 技术\ntags: [随笔]\ntoc: false\n---\n\n存储知识学习\n\n今年3月份又换了工作，还是坚持技术为主，技术和业务相结合并行提升\n\n读书与博客，还有issue，刷leetcode\n\n开始使用脑图规划自己学习路线与专业方向\n\n一次旅游，普吉岛\n\n期望\n","slug":"要做的一些事情","published":1,"updated":"2016-03-09T07:53:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vkb0004cn8edbechd50"},{"title":"网络通讯","date":"2016-03-01T09:40:47.000Z","toc":true,"_content":"#一、网络编程中两个主要的问题\n\n一个是如何准确的定位网络上一台或多台主机，另一个就是找到主机后如何可靠高效的进行数据传输。\n\n在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。\n\n而TCP层则提供面向应用的可靠（tcp）的或非可靠（UDP）的数据传输机制，这是网络编程的主要对象，一般不需要关心IP层是如何处理数据的。\n\n目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服务端口，使后来的客户也 能及时得到服务。\n\n<!--more-->\n\n#二、两类传输协议：TCP；UDP\n\nTCP是Tranfer Control Protocol的 简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建 立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送 或接收操作。\n\nUDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。\n\n比较：\n##UDP:\n1. 每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。\n2. UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。\n3. UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方\n\n##TCP:\n1. 面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。\n2. TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。\n3. TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。\n\n#三、总结的脑图：\n![网络通讯](网络通讯/网络通信.jpg)\n","source":"_posts/网络通讯.md","raw":"title: 网络通讯\ndate: 2016-03-01 17:40:47\ncategories: 技术\ntags: [java,网络,通讯]\ntoc: true\n---\n#一、网络编程中两个主要的问题\n\n一个是如何准确的定位网络上一台或多台主机，另一个就是找到主机后如何可靠高效的进行数据传输。\n\n在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。\n\n而TCP层则提供面向应用的可靠（tcp）的或非可靠（UDP）的数据传输机制，这是网络编程的主要对象，一般不需要关心IP层是如何处理数据的。\n\n目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服务端口，使后来的客户也 能及时得到服务。\n\n<!--more-->\n\n#二、两类传输协议：TCP；UDP\n\nTCP是Tranfer Control Protocol的 简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建 立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送 或接收操作。\n\nUDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。\n\n比较：\n##UDP:\n1. 每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。\n2. UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。\n3. UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方\n\n##TCP:\n1. 面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。\n2. TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。\n3. TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。\n\n#三、总结的脑图：\n![网络通讯](网络通讯/网络通信.jpg)\n","slug":"网络通讯","published":1,"updated":"2016-03-09T08:02:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vkk0009cn8ek9n0uogg"},{"title":"红烧鲈鱼","date":"2015-06-21T14:28:38.000Z","toc":false,"_content":"![红烧鲈鱼](红烧鲈鱼/yu.jpg)\n>连续两天过节，趁着回家的机会要好好学习学习厨艺。自从出道以来，一直没做过鱼，今天在家小试牛刀，老娘手把手教我，于是乎定要把内功心法记录下来\n\n## Step1.基本食材\n1. 鲈鱼\n2. 葱、姜、蒜、大料、花椒\n3. 糖、醋、耗油、酱油、料酒、面或者淀粉\n\n## Step2.开始做菜吧\n1. 把鱼洗干净，切好，然后准备好葱姜大蒜少许，放在碗里（调料一）\n2. 再准备一个碗用来调料：放少许糖，醋和均匀，然后稍微多倒一些酱油和耗油（调料二）\n3. 拿一个碟子，倒上面粉或者淀粉，然后把处理好的鱼放在里面，让其表面粘上面粉即可\n4. 开火炝锅，倒些花椒，可以去腥，然后把鱼放在锅里\n5. 最好不要频繁的用铲子搅和鱼，容易把鱼皮弄烂\n6. 晃悠锅里的油，差不多了就把刚刚准备好的葱姜大蒜（调料一）倒进去\n7. 快速用料酒撒锅一圈，然后闷上盖子，料酒可以去腥\n8. 轻轻地将鱼翻个身，让两面受热均匀\n9. 把刚刚准备好的调料二加一些自来水，倒入锅中，直到锅中的水覆盖过鱼\n10. 开大火，盖上盖子，等待收汁吧！\n11. 别忘了，时不时的晃悠一下锅，别让锅底的鱼糊了，铲的时候小心一些\n12. 如果觉得不够咸，可以放一些盐，不过之前调料二已经很有咸蛋味了\n\n好了，就这么多，期待下一期美食，see you again~\n","source":"_posts/红烧鲈鱼.md","raw":"title: 红烧鲈鱼\ndate: 2015-06-21 22:28:38\ncategories: 生活\ntags: [家常菜,海鲜]\ntoc: false\n---\n![红烧鲈鱼](红烧鲈鱼/yu.jpg)\n>连续两天过节，趁着回家的机会要好好学习学习厨艺。自从出道以来，一直没做过鱼，今天在家小试牛刀，老娘手把手教我，于是乎定要把内功心法记录下来\n\n## Step1.基本食材\n1. 鲈鱼\n2. 葱、姜、蒜、大料、花椒\n3. 糖、醋、耗油、酱油、料酒、面或者淀粉\n\n## Step2.开始做菜吧\n1. 把鱼洗干净，切好，然后准备好葱姜大蒜少许，放在碗里（调料一）\n2. 再准备一个碗用来调料：放少许糖，醋和均匀，然后稍微多倒一些酱油和耗油（调料二）\n3. 拿一个碟子，倒上面粉或者淀粉，然后把处理好的鱼放在里面，让其表面粘上面粉即可\n4. 开火炝锅，倒些花椒，可以去腥，然后把鱼放在锅里\n5. 最好不要频繁的用铲子搅和鱼，容易把鱼皮弄烂\n6. 晃悠锅里的油，差不多了就把刚刚准备好的葱姜大蒜（调料一）倒进去\n7. 快速用料酒撒锅一圈，然后闷上盖子，料酒可以去腥\n8. 轻轻地将鱼翻个身，让两面受热均匀\n9. 把刚刚准备好的调料二加一些自来水，倒入锅中，直到锅中的水覆盖过鱼\n10. 开大火，盖上盖子，等待收汁吧！\n11. 别忘了，时不时的晃悠一下锅，别让锅底的鱼糊了，铲的时候小心一些\n12. 如果觉得不够咸，可以放一些盐，不过之前调料二已经很有咸蛋味了\n\n好了，就这么多，期待下一期美食，see you again~\n","slug":"红烧鲈鱼","published":1,"updated":"2016-03-09T07:53:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vkq000hcn8ekpw10ubc"},{"title":"索引结构以及加锁理解","date":"2016-03-09T03:14:59.000Z","toc":true,"_content":"\n# 磁盘结构\n计算机存储设备一般分为两种：内存储器(main memory)和外存储器(external memory)。 内存存取速度快，但容量小，价格昂贵，而且不能长期保存数据(在不通电情况下数据会消失)。\n磁盘的构造\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13591471/e4a5e2ac-e523-11e5-8d1b-ac72fdaede4a.png)\n磁盘读写原理\n\n磁盘上数据必须用一个三维地址唯一标示：柱面号、盘面号、块号(磁道上的盘块)。\n访问某一具体信息，由3部分时间组成：\n\n- 查找时间(seek time) Ts: 完成上述步骤(1)所需要的时间。这部分时间代价最高，最大可达到0.1s左右。\n\n- 等待时间(latency time) Tl: 完成上述步骤(3)所需要的时间。由于盘片绕主轴旋转速度很快，一般为7200转/分(电脑硬盘的性能指标之一, 家用的普通硬盘的转速一般有5400rpm(笔记本)、7200rpm几种)。因此一般旋转一圈大约0.0083s。\n\n- 传输时间(transmission time) Tt: 数据通过系统总线传送到内存的时间，一般传输一个字节(byte)大概0.02us=2\\*10^(-8)s\n\n> 磁盘读取数据是以盘块(block)为基本单位的。位于同一盘块中的所有数据都能被一次性全部读取出来。而磁盘IO代价主要花费在查找时间Ts上。因此我们应该尽量将相关信息存放在同一盘块，同一磁道中。或者至少放在同一柱面或相邻柱面上，以求在读/写信息时尽量减少磁头来回移动的次数，避免过多的查找时间Ts。    \n> 所以，在大规模数据存储方面，大量数据存储在外存磁盘中，而在外存磁盘中读取/写入块(block)中某数据时，首先需要定位到磁盘中的某块，如何有效地查找磁盘中的数据，需要一种合理高效的外存数据结构，就是下面所要重点阐述的B-tree结构。\n\n<!--more-->\n\n# Btree、B+tree、红黑树\n## Btree\n> 首先要强调一下，B-tree==Btree，特此说明。\n\n相比二叉树，Btree每个节点内有多个分支，即多叉的平衡查找树。Btree与红黑树最大的不同在于，Btree节点可以有许多子女。所有的叶结点都处于相同的深度，带阴影的结点为查找字母R时要检查的结点。\n如图，这是一棵Btree，一棵关键字为英语中辅音字母的B树，现在要从树种查找字母R\n![image](https://cloud.githubusercontent.com/assets/11264082/13593557/3d5f9254-e537-11e5-9f3f-e4da40ab9ded.png)\n一棵m阶的Btree满足以下条件：\n- 每个节点至多有m棵子树\n\n- 除根节点外，其它每个分支节点至少有m/2棵子树\n\n- 根节点至少有两棵子树\n\n- 所有叶节点在同一层上。Btree的叶子节点可以看成一种外部节点，不包含任何信息\n\n- 有j个孩子的非叶节点恰好有j-1个关键码，关键码按递增次序排列\n\nB树中的每个结点根据实际情况可以包含大量的关键字信息和分支(当然是不能超过磁盘块的大小，根据磁盘驱动(disk drives)的不同，一般块的大小在1k~4k左右)；这样树的深度降低了，这就意味着查找一个元素只要很少结点从外存磁盘中读入内存，很快访问到要查找的数据。可以按下图理解：\n![image](https://cloud.githubusercontent.com/assets/11264082/13593784/72c8c94a-e539-11e5-8e91-6f645f806fcb.png)\n下面，咱们来模拟下查找文件29的过程：\n\n1. 根据根结点指针找到文件目录的根磁盘块1，将其中的信息导入内存。【磁盘IO操作 1次】\n\n1. 此时内存中有两个文件名17、35和三个存储其他磁盘页面地址的数据。根据算法我们发现：17<29<35，因此我们找到指针p2。\n\n1. 根据p2指针，我们定位到磁盘块3，并将其中的信息导入内存。【磁盘IO操作 2次】\n\n1. 此时内存中有两个文件名26，30和三个存储其他磁盘页面地址的数据。根据算法我们发现：26<29<30，因此我们找到指针p2。\n\n1. 根据p2指针，我们定位到磁盘块8，并将其中的信息导入内存。【磁盘IO操作 3次】\n\n1. 此时内存中有两个文件名28，29。根据算法我们查找到文件名29，并定位了该文件内存的磁盘地址。\n> 分析上面的过程，发现需要3次磁盘IO操作和3次内存查找操作。关于内存中的文件名查找，由于是一个有序表结构，可以利用折半查找提高效率。至于IO操作是影响整个B树查找效率的决定因素。\n\nBtree的CRUD时间复杂度：\n![image](https://cloud.githubusercontent.com/assets/11264082/13591824/49c3ba44-e527-11e5-8639-032ecdd4c00e.png)\n可以看出来，Btree的所有数据都是放在不同磁盘块上的\n\nBtree具体实战:\n- 下面咱们通过一个实例来逐步讲解下。插入以下字符字母到一棵空的B 树中（非根结点关键字数小了（小于2个）就合并，大了（超过4个）就分裂）：C N G A H E K Q M F W L T Z D P R X Y S，首先，结点空间足够，4个字母插入相同的结点中，如下图：\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13595987/7035bfe2-e54a-11e5-8bc6-fa741a053b07.png)\n- 当咱们试着插入H时，结点发现空间不够，以致将其分裂成2个结点，移动中间元素G上移到新的根结点中，在实现过程中，咱们把A和C留在当前结点中，而H和N放置新的其右邻居结点中。如下图：\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13595997/7a563ea2-e54a-11e5-80da-f916a0d38f0b.png)\n- 当咱们插入E,K,Q时，不需要任何分裂操作\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596000/81d24ef0-e54a-11e5-90e8-681cb0fbcfef.png)\n- 插入M需要一次分裂，注意M恰好是中间关键字元素，以致向上移到父节点中\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596011/91d0fc5c-e54a-11e5-9fa0-7fd8ef66c020.png)\n- 插入F,W,L,T不需要任何分裂操作\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596017/9d019d3e-e54a-11e5-9d9e-ea9a10220bba.png)\n- 插入Z时，最右的叶子结点空间满了，需要进行分裂操作，中间元素T上移到父节点中，注意通过上移中间元素，树最终还是保持平衡，分裂结果的结点存在2个关键字元素。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596020/a365eb12-e54a-11e5-922c-72399fe6503c.png)\n- 插入D时，导致最左边的叶子结点被分裂，D恰好也是中间元素，上移到父节点中，然后字母P,R,X,Y陆续插入不需要任何分裂操作（别忘了，树中至多5个孩子）。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596023/aa9d92b8-e54a-11e5-8f2c-98ca93c5b957.png)\n- 最后，当插入S时，含有N,P,Q,R的结点需要分裂，把中间元素Q上移到父节点中，但是情况来了，父节点中空间已经满了，所以也要进行分裂，将父节点中的中间元素M上移到新形成的根结点中，注意以前在父节点中的第三个指针在修改后包括D和G节点中。这样具体插入操作的完成，下面介绍删除操作，删除操作相对于插入操作要考虑的情况多点。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596028/b51fc3fa-e54a-11e5-9bb6-96cb2f34d89b.png)\n\n\n## B+tree\n传统关系型数据库(Oracle/MySQL/PostgreSQL…)，其主要的索引结构，使用的都是B+树。更有甚者，InnoDB引擎的表数据，整个都是以B+树的组织形式存放的。下图，是一个经典的B+树组织结构图(2层B+树，每个页面的扇出为4)：\n![image](https://cloud.githubusercontent.com/assets/11264082/13593934/02085ce6-e53b-11e5-934f-a5da5bd35fc5.png)\n注意：\n- 此B+树，以InnoDB实现的B+树结构为准；\n\n- 此B+树，有5条用户记录，分别是1，2，3，4，5；\n\n- B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n\n- B+树的所有数据，均存储在B+树的叶节点；\n\n- B+树叶节点的所有页面，通过双向链表链接起来；\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13595425/27263a92-e546-11e5-80e4-59abb289d326.png)\n为什么说B+tree树更适合实际应用中操作系统的文件索引和数据库索引？\n- B+tree的磁盘读写代价更低\n\n> B+tree内部节点并没有指向关键字具体信息的指针。因此其中内部节点相对Btree更小。如果把所有同一内部节点的关键字存放在同一个磁盘块中，那么磁盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。想多来说IO读写次数也就降低了。\n> 举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。\n\n- B+tree查询效率更稳定\n\n> 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。\n> 数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）。\n\n总结\n通过以上介绍，大致将B树，B+树，B\\*树总结如下：\n- B树：有序数组+平衡多叉树；\n\n- B+树：有序数组链表+平衡多叉树；\n\n- B\\*树：一棵丰满的B+树。\n\n在大规模数据存储的文件系统中，B~tree系列数据结构，起着很重要的作用，对于存储不同的数据，节点相关的信息也是有所不同，这里根据自己的理解，画的一个查找以职工号为关键字，职工号为38的记录的简单示意图。(这里假设每个物理块容纳3个索引，磁盘的I/O操作的基本单位是块（block),磁盘访问很费时，采用B+树有效的减少了访问磁盘的次数。）\n![image](https://cloud.githubusercontent.com/assets/11264082/13596156/849f9fba-e54b-11e5-99d3-0792f737c688.png)\n\n> B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。\n比如要查 5-10之间的，B+树一把到5这个标记，再一把到10，然后串起来就行了，B树就非常麻烦。B树的好处，就是成功查询特别有利，因为树的高度总体要比B+树矮。不成功的情况下，B树也比B+树稍稍占一点点便宜。\nB树比如你的例子中查，17的话，一把就得到结果了，\n有很多基于频率的搜索是选用B树，越频繁query的结点越往根上走，前提是需要对query做统计，而且要对key做一些变化。\n另外B树也好B+树也好，根或者上面几层因为被反复query，所以这几块基本都在内存中，不会出现读磁盘IO，一般已启动的时候，就会主动换入内存。\nmysql 底层存储是用B+树实现的，知道为什么。内存中B+树是没有优势的，但是一到磁盘，B+树的威力就出来了\n\n# mysql不同存储引擎索引结构\n## MyISAM索引实现\nMyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM索引的原理图：\n![image](https://cloud.githubusercontent.com/assets/11264082/13596332/d091af52-e54c-11e5-918c-e45668aa948b.png)\nMyISAM的索引方式也叫做“非聚集”的，因此对应数据也不是顺序的\n## InnoDB索引实现\n虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。\n2. 第一个重大区别是InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596638/aa940b2c-e54e-11e5-967d-7411651f77b3.png)\n可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。\n\n2. 第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，图11为定义在Col3上的一个辅助索引：\n![image](https://cloud.githubusercontent.com/assets/11264082/13596682/eba20862-e54e-11e5-9aae-02ed6f89cac4.png)\n       这里以英文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。\n总结\n![image](https://cloud.githubusercontent.com/assets/11264082/13596562/2badbc54-e54e-11e5-8e7e-8081badb8edf.png)\n3. Myisam\n> - 主键索引/非主键索引\n> - 叶子节点上均带有行号，通过行号进行索引\n\n3. Innodb\n> - 主键索引(聚簇索引)，叶子节点上带有数据\n> - 非主键索引(第二索引)，叶子节点上带有主键id\n\n为什么innodb存储引擎的索引设计与myisam的实现有异？\n> myisam属于堆表，数据写入一直累积(concurrent_insert参数设置为2);此时写入性能比innodb好，但是无论是主键查询还是非主键查询，都不可避免的需要二次io(除非能索引内完成字段记录返回)\n> innodb属于聚簇索引组织表(主键索引即数据),由于必须保证索引有序，在写入时需要找到合适的位置进行插入，有时候还会导致二叉树调整所以写入性能比myisam要差；但是主键查找时只需要一次io即可返回数据，非主键索引查询时如果在索引内不能完成查询记录返回则需要第二次的io\n\n# mysql InnoDB事务和锁\n## MVCC：Snapshot Read vs Current Read\nMySQL InnoDB存储引擎，实现的是基于多版本的并发控制协议——MVCC (Multi-Version Concurrency Control) (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处，相信也是耳熟能详：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，这也是为什么现阶段，几乎所有的RDBMS，都支持了MVCC。\n\n在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。\n\n- 快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)\n\nselect \\* from table where ?;\n- 当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。\n\nselect \\* from table where ? lock in share mode;\nselect \\* from table where ? for update;\ninsert into table values (…);\nupdate table set ? where ?;\ndelete from table where ?;\n所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。\n![image](https://cloud.githubusercontent.com/assets/11264082/13623266/5a41c58c-e5e0-11e5-99e7-61883fb1bee3.png)\n##一条简单SQL的加锁实现分析\n在介绍完一些背景知识之后，本文接下来将选择几个有代表性的例子，来详细分析MySQL的加锁处理。当然，还是从最简单的例子说起。经常有朋友发给我一个SQL，然后问我，这个SQL加什么锁？就如同下面两条简单的SQL，他们加什么锁？\n- SQL1：select \\* from t1 where id = 10;\n\n- SQL2：delete from t1 where id = 10;\n\n针对这个问题，该怎么回答？我能想象到的一个答案是：\n- SQL1：不加锁。因为MySQL是使用多版本并发控制的，读不加锁。\n\n- SQL2：对id = 10的记录加写锁 (走主键索引)。\n\n这个答案对吗？说不上来。即可能是正确的，也有可能是错误的，已知条件不足，这个问题没有答案。如果让我来回答这个问题，我必须还要知道以下的一些前提，前提不同，我能给出的答案也就不同。要回答这个问题，还缺少哪些前提条件？\n- 前提一：id列是不是主键？\n\n- 前提二：当前系统的隔离级别是什么？\n\n- 前提三：id列如果不是主键，那么id列上有索引吗？\n\n- 前提四：id列上如果有二级索引，那么这个索引是唯一索引吗？\n\n- 前提五：两个SQL的执行计划是什么？索引扫描？全表扫描？\n\n## 死锁原理与分析\n下面，来看看两个死锁的例子 (一个是两个Session的两条SQL产生死锁；另一个是两个Session的一条SQL，产生死锁)：\n![image](https://cloud.githubusercontent.com/assets/11264082/13623403/5f69683e-e5e1-11e5-8f6c-ad66e76bc412.png)\n![image](https://cloud.githubusercontent.com/assets/11264082/13623405/628a9786-e5e1-11e5-8097-22755ecf3877.png)\n上面的两个死锁用例。第一个非常好理解，也是最常见的死锁，每个事务执行两条SQL，分别持有了一把锁，然后加另一把锁，产生死锁\n\n第二个用例，虽然每个Session都只有一条语句，仍旧会产生死锁。要分析这个死锁，首先必须用到本文前面提到的MySQL加锁的规则。针对Session 1，从name索引出发，读到的[hdc, 1]，[hdc, 6]均满足条件，不仅会加name索引上的记录X锁，而且会加聚簇索引上的记录X锁，加锁顺序为先[1,hdc,100]，后[6,hdc,10]。而Session 2，从pubtime索引出发，[10,6],[100,1]均满足过滤条件，同样也会加聚簇索引上的记录X锁，加锁顺序为[6,hdc,10]，后[1,hdc,100]。发现没有，跟Session 1的加锁顺序正好相反，如果两个Session恰好都持有了第一把锁，请求加第二把锁，死锁就发生了。\n\n结论：死锁的发生与否，并不在于事务中有多少条SQL语句，死锁的关键在于：两个(或以上)的Session加锁的顺序不一致。而使用本文上面提到的，分析MySQL每条SQL语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发SQL间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。\n\n# 索引优化\n## 选择索引的数据类型\n- 越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。\n\n- 简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。\n\n- 尽量避免NULL：应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。\n\nFAQ\n4. like不能用索引？\n> 尽量减少like，但不是绝对不可用，”xxxx%” 是可以用到索引的，\n> 除了like，以下操作符也可用到索引：\n> <，<=，=，>，>=，BETWEEN，IN\n> <>，not in ，！=则不行\n\n4. 什么样的字段不适合建索引？\n> 一般来说，列的值唯一性太小（如性别，类型什么的），不适合建索引（怎样叫太小？一半说来，同值的数据超过表的百分之15，那就没必要建索引了）\n> 太长的列，可以选择只建立部分索引，（如：只取前十位做索引）\n> 更新非常频繁的数据不适宜建索引（怎样叫非常？意会）\n\n4. 一次查询能用多个索引吗?\n> 不能\n\n4. 多列查询该如何建索引?\n> 一次查询只能用到一个索引，所以 首先枪毙 a，b各建索引方案\n> a还是b？ 谁的区分度更高（同值的最少），建谁！\n> 当然，联合索引也是个不错的方案，ab，还是ba，则同上，区分度高者，在前\n\n4. 联合索引的问题?\n> where a = “xxx” 可以使用 AB 联合索引\n> where b = “xxx” 则不可 （再想象一下，这是书的目录？）\n> 所以，大多数情况下，有AB索引了，就可以不用在去建一个A索引了\n\n4. 哪些常见情况不能用索引?\n> like “%xxx”\n> not in ， ！=\n> 对列进行函数运算的情况（如 where md5(password) = “xxxx”）\n> WHERE index=1 OR A=10\n> 存了数值的字符串类型字段（如手机号），查询时记得不要丢掉值的引号，否则无法用到该字段相关索引，反之则没关系\n也即\n> select \\* from test where mobile = 13711112222;\n> 可是无法用到mobile字段的索引的哦（如果mobile是char 或 varchar类型的话）\n> btw，千万不要尝试用int来存手机号（为什么？自己想！要不自己试试）\n\n4. NULL 的问题\n> NULL会导致索引形同虚设，所以在设计表结构时应避免NULL 的存在（用其他方式表达你想表达的NULL，比如 -1？）\n\n4. 如何查看索引信息，如何分析是否正确用到索引?\n> show index from tablename;\n> explain select ……;\n> 关于explain，改天可以找个时间专门写一篇入门帖，在此之前，可以尝试 google\n","source":"_posts/索引结构以及加锁理解.md","raw":"title: 索引结构以及加锁理解\ndate: 2016-03-09 11:14:59\ncategories: 技术\ntags: [MySQL,索引,性能优化,树]\ntoc: true\n---\n\n# 磁盘结构\n计算机存储设备一般分为两种：内存储器(main memory)和外存储器(external memory)。 内存存取速度快，但容量小，价格昂贵，而且不能长期保存数据(在不通电情况下数据会消失)。\n磁盘的构造\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13591471/e4a5e2ac-e523-11e5-8d1b-ac72fdaede4a.png)\n磁盘读写原理\n\n磁盘上数据必须用一个三维地址唯一标示：柱面号、盘面号、块号(磁道上的盘块)。\n访问某一具体信息，由3部分时间组成：\n\n- 查找时间(seek time) Ts: 完成上述步骤(1)所需要的时间。这部分时间代价最高，最大可达到0.1s左右。\n\n- 等待时间(latency time) Tl: 完成上述步骤(3)所需要的时间。由于盘片绕主轴旋转速度很快，一般为7200转/分(电脑硬盘的性能指标之一, 家用的普通硬盘的转速一般有5400rpm(笔记本)、7200rpm几种)。因此一般旋转一圈大约0.0083s。\n\n- 传输时间(transmission time) Tt: 数据通过系统总线传送到内存的时间，一般传输一个字节(byte)大概0.02us=2\\*10^(-8)s\n\n> 磁盘读取数据是以盘块(block)为基本单位的。位于同一盘块中的所有数据都能被一次性全部读取出来。而磁盘IO代价主要花费在查找时间Ts上。因此我们应该尽量将相关信息存放在同一盘块，同一磁道中。或者至少放在同一柱面或相邻柱面上，以求在读/写信息时尽量减少磁头来回移动的次数，避免过多的查找时间Ts。    \n> 所以，在大规模数据存储方面，大量数据存储在外存磁盘中，而在外存磁盘中读取/写入块(block)中某数据时，首先需要定位到磁盘中的某块，如何有效地查找磁盘中的数据，需要一种合理高效的外存数据结构，就是下面所要重点阐述的B-tree结构。\n\n<!--more-->\n\n# Btree、B+tree、红黑树\n## Btree\n> 首先要强调一下，B-tree==Btree，特此说明。\n\n相比二叉树，Btree每个节点内有多个分支，即多叉的平衡查找树。Btree与红黑树最大的不同在于，Btree节点可以有许多子女。所有的叶结点都处于相同的深度，带阴影的结点为查找字母R时要检查的结点。\n如图，这是一棵Btree，一棵关键字为英语中辅音字母的B树，现在要从树种查找字母R\n![image](https://cloud.githubusercontent.com/assets/11264082/13593557/3d5f9254-e537-11e5-9f3f-e4da40ab9ded.png)\n一棵m阶的Btree满足以下条件：\n- 每个节点至多有m棵子树\n\n- 除根节点外，其它每个分支节点至少有m/2棵子树\n\n- 根节点至少有两棵子树\n\n- 所有叶节点在同一层上。Btree的叶子节点可以看成一种外部节点，不包含任何信息\n\n- 有j个孩子的非叶节点恰好有j-1个关键码，关键码按递增次序排列\n\nB树中的每个结点根据实际情况可以包含大量的关键字信息和分支(当然是不能超过磁盘块的大小，根据磁盘驱动(disk drives)的不同，一般块的大小在1k~4k左右)；这样树的深度降低了，这就意味着查找一个元素只要很少结点从外存磁盘中读入内存，很快访问到要查找的数据。可以按下图理解：\n![image](https://cloud.githubusercontent.com/assets/11264082/13593784/72c8c94a-e539-11e5-8e91-6f645f806fcb.png)\n下面，咱们来模拟下查找文件29的过程：\n\n1. 根据根结点指针找到文件目录的根磁盘块1，将其中的信息导入内存。【磁盘IO操作 1次】\n\n1. 此时内存中有两个文件名17、35和三个存储其他磁盘页面地址的数据。根据算法我们发现：17<29<35，因此我们找到指针p2。\n\n1. 根据p2指针，我们定位到磁盘块3，并将其中的信息导入内存。【磁盘IO操作 2次】\n\n1. 此时内存中有两个文件名26，30和三个存储其他磁盘页面地址的数据。根据算法我们发现：26<29<30，因此我们找到指针p2。\n\n1. 根据p2指针，我们定位到磁盘块8，并将其中的信息导入内存。【磁盘IO操作 3次】\n\n1. 此时内存中有两个文件名28，29。根据算法我们查找到文件名29，并定位了该文件内存的磁盘地址。\n> 分析上面的过程，发现需要3次磁盘IO操作和3次内存查找操作。关于内存中的文件名查找，由于是一个有序表结构，可以利用折半查找提高效率。至于IO操作是影响整个B树查找效率的决定因素。\n\nBtree的CRUD时间复杂度：\n![image](https://cloud.githubusercontent.com/assets/11264082/13591824/49c3ba44-e527-11e5-8639-032ecdd4c00e.png)\n可以看出来，Btree的所有数据都是放在不同磁盘块上的\n\nBtree具体实战:\n- 下面咱们通过一个实例来逐步讲解下。插入以下字符字母到一棵空的B 树中（非根结点关键字数小了（小于2个）就合并，大了（超过4个）就分裂）：C N G A H E K Q M F W L T Z D P R X Y S，首先，结点空间足够，4个字母插入相同的结点中，如下图：\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13595987/7035bfe2-e54a-11e5-8bc6-fa741a053b07.png)\n- 当咱们试着插入H时，结点发现空间不够，以致将其分裂成2个结点，移动中间元素G上移到新的根结点中，在实现过程中，咱们把A和C留在当前结点中，而H和N放置新的其右邻居结点中。如下图：\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13595997/7a563ea2-e54a-11e5-80da-f916a0d38f0b.png)\n- 当咱们插入E,K,Q时，不需要任何分裂操作\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596000/81d24ef0-e54a-11e5-90e8-681cb0fbcfef.png)\n- 插入M需要一次分裂，注意M恰好是中间关键字元素，以致向上移到父节点中\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596011/91d0fc5c-e54a-11e5-9fa0-7fd8ef66c020.png)\n- 插入F,W,L,T不需要任何分裂操作\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596017/9d019d3e-e54a-11e5-9d9e-ea9a10220bba.png)\n- 插入Z时，最右的叶子结点空间满了，需要进行分裂操作，中间元素T上移到父节点中，注意通过上移中间元素，树最终还是保持平衡，分裂结果的结点存在2个关键字元素。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596020/a365eb12-e54a-11e5-922c-72399fe6503c.png)\n- 插入D时，导致最左边的叶子结点被分裂，D恰好也是中间元素，上移到父节点中，然后字母P,R,X,Y陆续插入不需要任何分裂操作（别忘了，树中至多5个孩子）。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596023/aa9d92b8-e54a-11e5-8f2c-98ca93c5b957.png)\n- 最后，当插入S时，含有N,P,Q,R的结点需要分裂，把中间元素Q上移到父节点中，但是情况来了，父节点中空间已经满了，所以也要进行分裂，将父节点中的中间元素M上移到新形成的根结点中，注意以前在父节点中的第三个指针在修改后包括D和G节点中。这样具体插入操作的完成，下面介绍删除操作，删除操作相对于插入操作要考虑的情况多点。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596028/b51fc3fa-e54a-11e5-9bb6-96cb2f34d89b.png)\n\n\n## B+tree\n传统关系型数据库(Oracle/MySQL/PostgreSQL…)，其主要的索引结构，使用的都是B+树。更有甚者，InnoDB引擎的表数据，整个都是以B+树的组织形式存放的。下图，是一个经典的B+树组织结构图(2层B+树，每个页面的扇出为4)：\n![image](https://cloud.githubusercontent.com/assets/11264082/13593934/02085ce6-e53b-11e5-934f-a5da5bd35fc5.png)\n注意：\n- 此B+树，以InnoDB实现的B+树结构为准；\n\n- 此B+树，有5条用户记录，分别是1，2，3，4，5；\n\n- B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n\n- B+树的所有数据，均存储在B+树的叶节点；\n\n- B+树叶节点的所有页面，通过双向链表链接起来；\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13595425/27263a92-e546-11e5-80e4-59abb289d326.png)\n为什么说B+tree树更适合实际应用中操作系统的文件索引和数据库索引？\n- B+tree的磁盘读写代价更低\n\n> B+tree内部节点并没有指向关键字具体信息的指针。因此其中内部节点相对Btree更小。如果把所有同一内部节点的关键字存放在同一个磁盘块中，那么磁盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。想多来说IO读写次数也就降低了。\n> 举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。\n\n- B+tree查询效率更稳定\n\n> 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。\n> 数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）。\n\n总结\n通过以上介绍，大致将B树，B+树，B\\*树总结如下：\n- B树：有序数组+平衡多叉树；\n\n- B+树：有序数组链表+平衡多叉树；\n\n- B\\*树：一棵丰满的B+树。\n\n在大规模数据存储的文件系统中，B~tree系列数据结构，起着很重要的作用，对于存储不同的数据，节点相关的信息也是有所不同，这里根据自己的理解，画的一个查找以职工号为关键字，职工号为38的记录的简单示意图。(这里假设每个物理块容纳3个索引，磁盘的I/O操作的基本单位是块（block),磁盘访问很费时，采用B+树有效的减少了访问磁盘的次数。）\n![image](https://cloud.githubusercontent.com/assets/11264082/13596156/849f9fba-e54b-11e5-99d3-0792f737c688.png)\n\n> B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。\n比如要查 5-10之间的，B+树一把到5这个标记，再一把到10，然后串起来就行了，B树就非常麻烦。B树的好处，就是成功查询特别有利，因为树的高度总体要比B+树矮。不成功的情况下，B树也比B+树稍稍占一点点便宜。\nB树比如你的例子中查，17的话，一把就得到结果了，\n有很多基于频率的搜索是选用B树，越频繁query的结点越往根上走，前提是需要对query做统计，而且要对key做一些变化。\n另外B树也好B+树也好，根或者上面几层因为被反复query，所以这几块基本都在内存中，不会出现读磁盘IO，一般已启动的时候，就会主动换入内存。\nmysql 底层存储是用B+树实现的，知道为什么。内存中B+树是没有优势的，但是一到磁盘，B+树的威力就出来了\n\n# mysql不同存储引擎索引结构\n## MyISAM索引实现\nMyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM索引的原理图：\n![image](https://cloud.githubusercontent.com/assets/11264082/13596332/d091af52-e54c-11e5-918c-e45668aa948b.png)\nMyISAM的索引方式也叫做“非聚集”的，因此对应数据也不是顺序的\n## InnoDB索引实现\n虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。\n2. 第一个重大区别是InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。\n\n![image](https://cloud.githubusercontent.com/assets/11264082/13596638/aa940b2c-e54e-11e5-967d-7411651f77b3.png)\n可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。\n\n2. 第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，图11为定义在Col3上的一个辅助索引：\n![image](https://cloud.githubusercontent.com/assets/11264082/13596682/eba20862-e54e-11e5-9aae-02ed6f89cac4.png)\n       这里以英文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。\n总结\n![image](https://cloud.githubusercontent.com/assets/11264082/13596562/2badbc54-e54e-11e5-8e7e-8081badb8edf.png)\n3. Myisam\n> - 主键索引/非主键索引\n> - 叶子节点上均带有行号，通过行号进行索引\n\n3. Innodb\n> - 主键索引(聚簇索引)，叶子节点上带有数据\n> - 非主键索引(第二索引)，叶子节点上带有主键id\n\n为什么innodb存储引擎的索引设计与myisam的实现有异？\n> myisam属于堆表，数据写入一直累积(concurrent_insert参数设置为2);此时写入性能比innodb好，但是无论是主键查询还是非主键查询，都不可避免的需要二次io(除非能索引内完成字段记录返回)\n> innodb属于聚簇索引组织表(主键索引即数据),由于必须保证索引有序，在写入时需要找到合适的位置进行插入，有时候还会导致二叉树调整所以写入性能比myisam要差；但是主键查找时只需要一次io即可返回数据，非主键索引查询时如果在索引内不能完成查询记录返回则需要第二次的io\n\n# mysql InnoDB事务和锁\n## MVCC：Snapshot Read vs Current Read\nMySQL InnoDB存储引擎，实现的是基于多版本的并发控制协议——MVCC (Multi-Version Concurrency Control) (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处，相信也是耳熟能详：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，这也是为什么现阶段，几乎所有的RDBMS，都支持了MVCC。\n\n在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。\n\n- 快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)\n\nselect \\* from table where ?;\n- 当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。\n\nselect \\* from table where ? lock in share mode;\nselect \\* from table where ? for update;\ninsert into table values (…);\nupdate table set ? where ?;\ndelete from table where ?;\n所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。\n![image](https://cloud.githubusercontent.com/assets/11264082/13623266/5a41c58c-e5e0-11e5-99e7-61883fb1bee3.png)\n##一条简单SQL的加锁实现分析\n在介绍完一些背景知识之后，本文接下来将选择几个有代表性的例子，来详细分析MySQL的加锁处理。当然，还是从最简单的例子说起。经常有朋友发给我一个SQL，然后问我，这个SQL加什么锁？就如同下面两条简单的SQL，他们加什么锁？\n- SQL1：select \\* from t1 where id = 10;\n\n- SQL2：delete from t1 where id = 10;\n\n针对这个问题，该怎么回答？我能想象到的一个答案是：\n- SQL1：不加锁。因为MySQL是使用多版本并发控制的，读不加锁。\n\n- SQL2：对id = 10的记录加写锁 (走主键索引)。\n\n这个答案对吗？说不上来。即可能是正确的，也有可能是错误的，已知条件不足，这个问题没有答案。如果让我来回答这个问题，我必须还要知道以下的一些前提，前提不同，我能给出的答案也就不同。要回答这个问题，还缺少哪些前提条件？\n- 前提一：id列是不是主键？\n\n- 前提二：当前系统的隔离级别是什么？\n\n- 前提三：id列如果不是主键，那么id列上有索引吗？\n\n- 前提四：id列上如果有二级索引，那么这个索引是唯一索引吗？\n\n- 前提五：两个SQL的执行计划是什么？索引扫描？全表扫描？\n\n## 死锁原理与分析\n下面，来看看两个死锁的例子 (一个是两个Session的两条SQL产生死锁；另一个是两个Session的一条SQL，产生死锁)：\n![image](https://cloud.githubusercontent.com/assets/11264082/13623403/5f69683e-e5e1-11e5-8f6c-ad66e76bc412.png)\n![image](https://cloud.githubusercontent.com/assets/11264082/13623405/628a9786-e5e1-11e5-8097-22755ecf3877.png)\n上面的两个死锁用例。第一个非常好理解，也是最常见的死锁，每个事务执行两条SQL，分别持有了一把锁，然后加另一把锁，产生死锁\n\n第二个用例，虽然每个Session都只有一条语句，仍旧会产生死锁。要分析这个死锁，首先必须用到本文前面提到的MySQL加锁的规则。针对Session 1，从name索引出发，读到的[hdc, 1]，[hdc, 6]均满足条件，不仅会加name索引上的记录X锁，而且会加聚簇索引上的记录X锁，加锁顺序为先[1,hdc,100]，后[6,hdc,10]。而Session 2，从pubtime索引出发，[10,6],[100,1]均满足过滤条件，同样也会加聚簇索引上的记录X锁，加锁顺序为[6,hdc,10]，后[1,hdc,100]。发现没有，跟Session 1的加锁顺序正好相反，如果两个Session恰好都持有了第一把锁，请求加第二把锁，死锁就发生了。\n\n结论：死锁的发生与否，并不在于事务中有多少条SQL语句，死锁的关键在于：两个(或以上)的Session加锁的顺序不一致。而使用本文上面提到的，分析MySQL每条SQL语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发SQL间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。\n\n# 索引优化\n## 选择索引的数据类型\n- 越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。\n\n- 简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。\n\n- 尽量避免NULL：应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。\n\nFAQ\n4. like不能用索引？\n> 尽量减少like，但不是绝对不可用，”xxxx%” 是可以用到索引的，\n> 除了like，以下操作符也可用到索引：\n> <，<=，=，>，>=，BETWEEN，IN\n> <>，not in ，！=则不行\n\n4. 什么样的字段不适合建索引？\n> 一般来说，列的值唯一性太小（如性别，类型什么的），不适合建索引（怎样叫太小？一半说来，同值的数据超过表的百分之15，那就没必要建索引了）\n> 太长的列，可以选择只建立部分索引，（如：只取前十位做索引）\n> 更新非常频繁的数据不适宜建索引（怎样叫非常？意会）\n\n4. 一次查询能用多个索引吗?\n> 不能\n\n4. 多列查询该如何建索引?\n> 一次查询只能用到一个索引，所以 首先枪毙 a，b各建索引方案\n> a还是b？ 谁的区分度更高（同值的最少），建谁！\n> 当然，联合索引也是个不错的方案，ab，还是ba，则同上，区分度高者，在前\n\n4. 联合索引的问题?\n> where a = “xxx” 可以使用 AB 联合索引\n> where b = “xxx” 则不可 （再想象一下，这是书的目录？）\n> 所以，大多数情况下，有AB索引了，就可以不用在去建一个A索引了\n\n4. 哪些常见情况不能用索引?\n> like “%xxx”\n> not in ， ！=\n> 对列进行函数运算的情况（如 where md5(password) = “xxxx”）\n> WHERE index=1 OR A=10\n> 存了数值的字符串类型字段（如手机号），查询时记得不要丢掉值的引号，否则无法用到该字段相关索引，反之则没关系\n也即\n> select \\* from test where mobile = 13711112222;\n> 可是无法用到mobile字段的索引的哦（如果mobile是char 或 varchar类型的话）\n> btw，千万不要尝试用int来存手机号（为什么？自己想！要不自己试试）\n\n4. NULL 的问题\n> NULL会导致索引形同虚设，所以在设计表结构时应避免NULL 的存在（用其他方式表达你想表达的NULL，比如 -1？）\n\n4. 如何查看索引信息，如何分析是否正确用到索引?\n> show index from tablename;\n> explain select ……;\n> 关于explain，改天可以找个时间专门写一篇入门帖，在此之前，可以尝试 google\n","slug":"索引结构以及加锁理解","published":1,"updated":"2016-03-09T08:02:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vkx000ocn8em0bmuxtd"},{"title":"期盼已久的offer","date":"2016-03-04T15:35:04.000Z","toc":false,"_content":"终于！终于等到了阿里offer，真的是很兴奋，有种梦想成真的感觉！满满的动力，不忘初心，努力向前！\n","source":"_posts/期盼已久的offer.md","raw":"title: 期盼已久的offer\ndate: 2016-03-04 23:35:04\ncategories: 职业\ntags: [阿里巴巴]\ntoc: false\n---\n终于！终于等到了阿里offer，真的是很兴奋，有种梦想成真的感觉！满满的动力，不忘初心，努力向前！\n","slug":"期盼已久的offer","published":1,"updated":"2016-03-09T07:53:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vl2000ycn8ehdqb6g7q"},{"title":"存储知识学习","date":"2016-03-01T07:24:38.000Z","_content":"\n## 1.磁盘基本知识\n磁盘大致由盘片、磁头、步进电机等几部分组成组成。\n盘面：硬盘一般含有一个或多个盘片，一个盘片包含两个盘面。\n磁道：每个盘面被划成多个狭窄的同心圆环，这样的圆环叫做磁道。\n扇区：每个磁道的每段圆弧叫做一个扇区，是读写的最小单位。\n柱面：所有盘面上的同一磁道，在竖直方向构成一个圆柱，称为柱面。\n读写过程：硬盘读取数据时，磁头先移动到读取扇区所在磁道的上方，这个过程耗时叫做磁盘寻道时间，平均时间为10ms。之后，通过盘片的旋转，使得扇区转到磁头的下方，这个过程耗时叫做旋转延迟时间，对于7200转/min的硬盘转一周为60*1000/7200=8.33ms，平均旋转延迟为4.17ms（半圈）。\n\n<!--more-->\n\n## 2.RAID基本知识\nRAID（Redundant Array of Independent Disks），即由独立的磁盘组成的具有冗余特性的阵列。其基本思想就是把多个相对便宜的硬盘组合起来，成为一个硬盘阵列组，使性能达到甚至超过一个价格昂贵、 容量巨大的硬盘。\nRAID 0，条带化存储，容量增加，并行化，但无冗余，容易单点故障。\n\nRAID 1，镜像存储，写入速率慢，读取速率快，有冗余备份，优点是高可靠、高可用，缺点是高花费。\n\nRAID 2，RAID 0的改进版，使用汉明码进行检测和纠错，适用于连续IO、大块IO（如视频流）。\n\nRAID 3，RAID 3和RAID 2的思路比较相似，使用奇偶校验进行错误检测和纠错，但校验盘单点故障。\n\nRAID 4，RAID 4和RAID 3思路一样，只不过是使用BLOCK进行存储。\n\nRAID 5，校验信息交叉的存储在所有数据盘上，高冗余，高数据传输率，实现复杂。\n\nRAID 6，相比RAID5增加块内的校验，允许同时坏2块硬盘而不丢失数据。\n\nRAID 01，先做条带（0），再做镜像（1）。读写速度快，数据保护能力强，空间利用率50%。\nRAID 10，先做镜像（1），再做条带（0）。\n\n## 3.存储方式\n根据网上的资料和理解，用Visio整理了一张图对比了下几种方式：\n![image](https://cloud.githubusercontent.com/assets/11264082/13420474/84972086-dfc1-11e5-91e9-dfb7b7e0e5cc.png)\nDAS全称为Direct Attached Storage，即服务器直连存储。如图所示，文件系统直接通过RAID完成对硬件访问。优点是操作简便，经济，缺点是分散式存储，不可集中管理。\nNAS全称为Network Attached Storage，即网络存储服务。如图所示，文件系统通过网络暴露出来给应用服务。优点是结构简单。配置使用管理非常方便，可实现跨平台的数据共享。缺点是需要占用网络资源、应用局限性大。\nSAN全称为Storage Aera Network，即存储区域网络，如图所示，RAID接口通过网络暴露出来。优点是扩展性强，集中管理，缺点是成本较高，管理维护难度大。\n\n## 4. IP SAN与FC SAN\nFC SAN指基于光纤通道（Fiber Channel）的存储区域网，在FC SAN中存在两张网，一张面向应用的网（IP网），另一张中则是存储网（FC网）。而IP SAN的出现则是为了寻求一种新的方式，用与应用网相同的体系架构来构造存储网，使用通用的IP网络及设备。\nFC SAN性能好，价格高，但与主流的IP网络异构。适用于关键应用的几种存储、备份及容灾。\nIP SAN则由于以太网MTU（1518字节）的限制，性能稍差，但基于通用的IP协议。适用于异地间的数据交换、备份容灾，非关键应用的集中存储。\n\n## 5. LVM基本知识\nLVM的全称是Logical Volume Manager，逻辑卷轴管理，主要解决的问题是，弹性调整文件系统的容量。\n![image](https://cloud.githubusercontent.com/assets/11264082/13420492/a2857f66-dfc1-11e5-9ef5-38bd5ca8b56b.png)\n与传统的磁盘与分区相比，LVM为计算机提供了更高层次的存储，通过在磁盘分区和文件系统之间增加一个逻辑层，提供一个抽象的逻辑盘卷。\n\n## 参考资料\n1.《大话存储》\n2.RAID技术介绍和总结http://blog.jobbole.com/83808/\n3.基于OpenStack的NAS服务https://www.ustack.com/blog/openstack-nas/\n","source":"_posts/存储知识学习.md","raw":"title: 存储知识学习\ndate: 2016-03-01 15:24:38\ncategories: 技术\ntags: [存储]\n---\n\n## 1.磁盘基本知识\n磁盘大致由盘片、磁头、步进电机等几部分组成组成。\n盘面：硬盘一般含有一个或多个盘片，一个盘片包含两个盘面。\n磁道：每个盘面被划成多个狭窄的同心圆环，这样的圆环叫做磁道。\n扇区：每个磁道的每段圆弧叫做一个扇区，是读写的最小单位。\n柱面：所有盘面上的同一磁道，在竖直方向构成一个圆柱，称为柱面。\n读写过程：硬盘读取数据时，磁头先移动到读取扇区所在磁道的上方，这个过程耗时叫做磁盘寻道时间，平均时间为10ms。之后，通过盘片的旋转，使得扇区转到磁头的下方，这个过程耗时叫做旋转延迟时间，对于7200转/min的硬盘转一周为60*1000/7200=8.33ms，平均旋转延迟为4.17ms（半圈）。\n\n<!--more-->\n\n## 2.RAID基本知识\nRAID（Redundant Array of Independent Disks），即由独立的磁盘组成的具有冗余特性的阵列。其基本思想就是把多个相对便宜的硬盘组合起来，成为一个硬盘阵列组，使性能达到甚至超过一个价格昂贵、 容量巨大的硬盘。\nRAID 0，条带化存储，容量增加，并行化，但无冗余，容易单点故障。\n\nRAID 1，镜像存储，写入速率慢，读取速率快，有冗余备份，优点是高可靠、高可用，缺点是高花费。\n\nRAID 2，RAID 0的改进版，使用汉明码进行检测和纠错，适用于连续IO、大块IO（如视频流）。\n\nRAID 3，RAID 3和RAID 2的思路比较相似，使用奇偶校验进行错误检测和纠错，但校验盘单点故障。\n\nRAID 4，RAID 4和RAID 3思路一样，只不过是使用BLOCK进行存储。\n\nRAID 5，校验信息交叉的存储在所有数据盘上，高冗余，高数据传输率，实现复杂。\n\nRAID 6，相比RAID5增加块内的校验，允许同时坏2块硬盘而不丢失数据。\n\nRAID 01，先做条带（0），再做镜像（1）。读写速度快，数据保护能力强，空间利用率50%。\nRAID 10，先做镜像（1），再做条带（0）。\n\n## 3.存储方式\n根据网上的资料和理解，用Visio整理了一张图对比了下几种方式：\n![image](https://cloud.githubusercontent.com/assets/11264082/13420474/84972086-dfc1-11e5-91e9-dfb7b7e0e5cc.png)\nDAS全称为Direct Attached Storage，即服务器直连存储。如图所示，文件系统直接通过RAID完成对硬件访问。优点是操作简便，经济，缺点是分散式存储，不可集中管理。\nNAS全称为Network Attached Storage，即网络存储服务。如图所示，文件系统通过网络暴露出来给应用服务。优点是结构简单。配置使用管理非常方便，可实现跨平台的数据共享。缺点是需要占用网络资源、应用局限性大。\nSAN全称为Storage Aera Network，即存储区域网络，如图所示，RAID接口通过网络暴露出来。优点是扩展性强，集中管理，缺点是成本较高，管理维护难度大。\n\n## 4. IP SAN与FC SAN\nFC SAN指基于光纤通道（Fiber Channel）的存储区域网，在FC SAN中存在两张网，一张面向应用的网（IP网），另一张中则是存储网（FC网）。而IP SAN的出现则是为了寻求一种新的方式，用与应用网相同的体系架构来构造存储网，使用通用的IP网络及设备。\nFC SAN性能好，价格高，但与主流的IP网络异构。适用于关键应用的几种存储、备份及容灾。\nIP SAN则由于以太网MTU（1518字节）的限制，性能稍差，但基于通用的IP协议。适用于异地间的数据交换、备份容灾，非关键应用的集中存储。\n\n## 5. LVM基本知识\nLVM的全称是Logical Volume Manager，逻辑卷轴管理，主要解决的问题是，弹性调整文件系统的容量。\n![image](https://cloud.githubusercontent.com/assets/11264082/13420492/a2857f66-dfc1-11e5-9ef5-38bd5ca8b56b.png)\n与传统的磁盘与分区相比，LVM为计算机提供了更高层次的存储，通过在磁盘分区和文件系统之间增加一个逻辑层，提供一个抽象的逻辑盘卷。\n\n## 参考资料\n1.《大话存储》\n2.RAID技术介绍和总结http://blog.jobbole.com/83808/\n3.基于OpenStack的NAS服务https://www.ustack.com/blog/openstack-nas/\n","slug":"存储知识学习","published":1,"updated":"2016-03-09T08:03:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vl50013cn8e3ppn59wg"},{"title":"如何读源码","date":"2015-09-12T15:51:25.000Z","toc":false,"_content":"#个人觉得学习一个东西的步骤\n1. 看介绍\n2. 看demo\n3. 看入门\n4. 自己做demo\n5. 看官方技术文档\n6. 应用\n7. 看总结\n8. 看心得\n9. 思考\n10. 看源码\n11. debug调试源码\n12. 修改源码\n13. 自己做见得实现\n14. 不断完善\n","source":"_posts/如何读源码.md","raw":"title: 如何读源码\ndate: 2015-09-12 23:51:25\ncategories: 技术\ntags: [心得,随笔]\ntoc: false\n---\n#个人觉得学习一个东西的步骤\n1. 看介绍\n2. 看demo\n3. 看入门\n4. 自己做demo\n5. 看官方技术文档\n6. 应用\n7. 看总结\n8. 看心得\n9. 思考\n10. 看源码\n11. debug调试源码\n12. 修改源码\n13. 自己做见得实现\n14. 不断完善\n","slug":"如何读源码","published":1,"updated":"2016-03-09T07:52:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vla0017cn8erlq7qyr4"},{"layout":"photo","title":"如何搭建个人博客","date":"2015-06-07T09:51:25.000Z","toc":true,"photos":["http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg"],"_content":"#hexo你的博客\n\n> ***作为技术人员应该有个自己的博客：***\n> - 记录学习知识\n> - 总结知识点，做心得体会\n> - 结交朋友\n\n废话不多说，网上找了很多hexo建站的教程，都不靠谱，最后经过摸爬滚打四处提问之后，总结了一个靠谱的建站流程，分享如下：\n\n## Step1.搭建环境\n1. ***安装Node.js***\nhexo是底层是基于node的，不会node没关系我们只需要安装好node就不需要管其它的啦。到[Node.js官网下载](http://nodejs.org/download)操作系统对应的版本，安装一路next就好了，我安装的版本是v0.12.4，查看是否按照成功以及node版本，用如下命令：\n``` python\n$ node -v\nv0.12.4\n```\n<!--more-->\n\n1. ***安装Git***\n我用的是mac pro，系统自带git，因此用Mac的同学不需要看啦！安装git的目的就是为了将本地代码上传到Github上。Git的客户端有很多，这里推荐[msysgit](http://code.google.com/p/msysgit)\n1. ***安装Sublime***\n环境搭建完了，下面我们当然要开始写文章啦！这里推荐用[Sublime](http://www.sublimetext.com/3)编辑器编写自己的文章，赶紧下载一个，然后我们可以开始我们的极客之旅了。\n\n## Step2.绑定Github账号\n> GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。\n\n## Step3.开始迅速建站\n3. ***安装hexo，在terminal里执行如下命令：***\n``` python\n$ npm install hexo-cli -g\n```\n3. ***初始化***\n``` python\n$ hexo init blog\n```\n    执行完这条命令后，会在你当前目录下生成一个名叫blog的文件夹，然后**cd blog到你的文件夹里**，以后所有命令都在这个目录下执行\n3. ***安装插件***\n``` python\n$ npm install\n```\n3. ***启动服务***\n``` python\n$ hexo server\n```\n    浏览器输入http://localhost:4000就可以看到效果。\n\n## Step4.开写！\n4. ***生成文章***\n执行new命令，生成指定名称的文章至hexo\\source\\_posts\\postName.md。\n    ``` python\n    $ hexo new \"postName\" #新建文章\n    ```\n4. ***生成html***\n    部署博客之前，还需要生成html静态页面，执行下面代码即可：\n    ``` python\n    $ hexo generate\n    ```\n4. ***部署到Github pages上***\n    html生成好了，在上传Github之前还需要修改一下根目录下的_config.yml配置文件\n    ```\n    deploy:\n        type: git\n        repository: https://github.com/liboyue23/liboyue23.github.io.git\n        branch: master\n    ```\n    安装deploy插件：\n\n    接下来，让我们执行最后一步把我们的博客上传到Github上吧！\n    ``` python\n    $ npm install hexo-deployer-git --save\n    $ hexo deploy\n    ```\n    大功告成！\n\n    ---------------------------------------华丽的分割线---------------------------------------\n## 进阶使用\n5. ***将github的issues扒下来：***\n``` python\n$ npm install hexo-migrator-github-issue --save\n$ hexo migrate github-issue liboyue23/liboyue23.github.io\n```\n\n5. ***使用豆瓣插件浏览豆瓣读书的数据***\n\n5. ***如何在文章中添加目录***\n``` python\n$ npm install hexo-toc --save\n```\n\n5. ***利用swiftype进行域名内容的检索***\n访问[swiftype](https://swiftype.com/home)网站，建立自己的index，当你的blog有内容更新之后可以在manage的domain管理中可以recrawl重新抓取你域名\n\n5. ***source目录里增加目录命令***\n``` python\n$ hexo new page \"about\"\n```\n然后你会发现source里面多了个目录about，里面有个index.md。其实你也可以手动建立。页面的格式和文章一样。\n接着把链接加上，themes/<theme_name>/_config.yml里面的menu一项，添加一行About: /about。\n完事。\n<!-- 以上几个命令一路下来，hexo工程便搭建好了，我们安装的是hexo3\n更多语法请按`Cmd + /` -->\n","source":"_posts/如何搭建个人博客.md","raw":"layout: photo\ntitle: 如何搭建个人博客\ndate: 2015-06-07 17:51:25\ncategories: 技术\ntags: [随笔,hexo]\ntoc: true\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n---\n#hexo你的博客\n\n> ***作为技术人员应该有个自己的博客：***\n> - 记录学习知识\n> - 总结知识点，做心得体会\n> - 结交朋友\n\n废话不多说，网上找了很多hexo建站的教程，都不靠谱，最后经过摸爬滚打四处提问之后，总结了一个靠谱的建站流程，分享如下：\n\n## Step1.搭建环境\n1. ***安装Node.js***\nhexo是底层是基于node的，不会node没关系我们只需要安装好node就不需要管其它的啦。到[Node.js官网下载](http://nodejs.org/download)操作系统对应的版本，安装一路next就好了，我安装的版本是v0.12.4，查看是否按照成功以及node版本，用如下命令：\n``` python\n$ node -v\nv0.12.4\n```\n<!--more-->\n\n1. ***安装Git***\n我用的是mac pro，系统自带git，因此用Mac的同学不需要看啦！安装git的目的就是为了将本地代码上传到Github上。Git的客户端有很多，这里推荐[msysgit](http://code.google.com/p/msysgit)\n1. ***安装Sublime***\n环境搭建完了，下面我们当然要开始写文章啦！这里推荐用[Sublime](http://www.sublimetext.com/3)编辑器编写自己的文章，赶紧下载一个，然后我们可以开始我们的极客之旅了。\n\n## Step2.绑定Github账号\n> GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。\n\n## Step3.开始迅速建站\n3. ***安装hexo，在terminal里执行如下命令：***\n``` python\n$ npm install hexo-cli -g\n```\n3. ***初始化***\n``` python\n$ hexo init blog\n```\n    执行完这条命令后，会在你当前目录下生成一个名叫blog的文件夹，然后**cd blog到你的文件夹里**，以后所有命令都在这个目录下执行\n3. ***安装插件***\n``` python\n$ npm install\n```\n3. ***启动服务***\n``` python\n$ hexo server\n```\n    浏览器输入http://localhost:4000就可以看到效果。\n\n## Step4.开写！\n4. ***生成文章***\n执行new命令，生成指定名称的文章至hexo\\source\\_posts\\postName.md。\n    ``` python\n    $ hexo new \"postName\" #新建文章\n    ```\n4. ***生成html***\n    部署博客之前，还需要生成html静态页面，执行下面代码即可：\n    ``` python\n    $ hexo generate\n    ```\n4. ***部署到Github pages上***\n    html生成好了，在上传Github之前还需要修改一下根目录下的_config.yml配置文件\n    ```\n    deploy:\n        type: git\n        repository: https://github.com/liboyue23/liboyue23.github.io.git\n        branch: master\n    ```\n    安装deploy插件：\n\n    接下来，让我们执行最后一步把我们的博客上传到Github上吧！\n    ``` python\n    $ npm install hexo-deployer-git --save\n    $ hexo deploy\n    ```\n    大功告成！\n\n    ---------------------------------------华丽的分割线---------------------------------------\n## 进阶使用\n5. ***将github的issues扒下来：***\n``` python\n$ npm install hexo-migrator-github-issue --save\n$ hexo migrate github-issue liboyue23/liboyue23.github.io\n```\n\n5. ***使用豆瓣插件浏览豆瓣读书的数据***\n\n5. ***如何在文章中添加目录***\n``` python\n$ npm install hexo-toc --save\n```\n\n5. ***利用swiftype进行域名内容的检索***\n访问[swiftype](https://swiftype.com/home)网站，建立自己的index，当你的blog有内容更新之后可以在manage的domain管理中可以recrawl重新抓取你域名\n\n5. ***source目录里增加目录命令***\n``` python\n$ hexo new page \"about\"\n```\n然后你会发现source里面多了个目录about，里面有个index.md。其实你也可以手动建立。页面的格式和文章一样。\n接着把链接加上，themes/<theme_name>/_config.yml里面的menu一项，添加一行About: /about。\n完事。\n<!-- 以上几个命令一路下来，hexo工程便搭建好了，我们安装的是hexo3\n更多语法请按`Cmd + /` -->\n","slug":"如何搭建个人博客","published":1,"updated":"2016-03-09T08:02:45.000Z","comments":1,"link":"","_id":"ciwu69vld001ccn8e50xn3wz1"},{"title":"分布式技术架构","date":"2015-06-26T09:51:25.000Z","toc":false,"_content":"#zookeeper\n对于zookeeper部署的一些重要提示：\n1. 使用监控程序来运行zookeeper是很重要的，因为zookeeper是快速失败的，遇到任何错误情况将会退出\n2. 简历cron来压缩zookeeper的数据和事务日志是很重要的。zookeeper守护进程自己本身并不会这么做，如果不设置cron，zookeeper很快就会耗尽磁盘空间\n\n#zookeeper功能介绍\n1. 加强集群稳定性\n2. 加强集群持续性\n3. 保证集群有序性\n4. 保证集群高效\n5. 数据结构和分等级的空间命名（znode）\n\n<!--more-->\n\n#zookeeper原理架构\n1. zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）\n2. 当服务启动或者在领导者崩溃后，Zab就进入了回复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。\n3. 每个Server工作过程中的三种状态：LOOKING（正在搜寻leader）；LEADING（为leader标记）；FOLLOWING：leader（已经选举出来。当前与之同步）\n\n#zookeeper选举机制\nFastleader选举算法：\n当leader崩溃或者失去大多数的follower时，这时候zookeeper进入回复模式，回复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。\n\n#zookeeper应用场景\n1. 统一命名服务（Name Service）\n2. 配置管理\n3. 集群管理\n4. 共享锁\n5. 队列管理\n","source":"_posts/分布式技术架构.md","raw":"title: 分布式技术架构\ndate: 2015-06-26 17:51:25\ncategories: 技术\ntags: [java,分布式]\ntoc: false\n---\n#zookeeper\n对于zookeeper部署的一些重要提示：\n1. 使用监控程序来运行zookeeper是很重要的，因为zookeeper是快速失败的，遇到任何错误情况将会退出\n2. 简历cron来压缩zookeeper的数据和事务日志是很重要的。zookeeper守护进程自己本身并不会这么做，如果不设置cron，zookeeper很快就会耗尽磁盘空间\n\n#zookeeper功能介绍\n1. 加强集群稳定性\n2. 加强集群持续性\n3. 保证集群有序性\n4. 保证集群高效\n5. 数据结构和分等级的空间命名（znode）\n\n<!--more-->\n\n#zookeeper原理架构\n1. zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）\n2. 当服务启动或者在领导者崩溃后，Zab就进入了回复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。\n3. 每个Server工作过程中的三种状态：LOOKING（正在搜寻leader）；LEADING（为leader标记）；FOLLOWING：leader（已经选举出来。当前与之同步）\n\n#zookeeper选举机制\nFastleader选举算法：\n当leader崩溃或者失去大多数的follower时，这时候zookeeper进入回复模式，回复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。\n\n#zookeeper应用场景\n1. 统一命名服务（Name Service）\n2. 配置管理\n3. 集群管理\n4. 共享锁\n5. 队列管理\n","slug":"分布式技术架构","published":1,"updated":"2016-03-09T08:03:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vlg001hcn8ew8xq01gg"},{"title":"互联网金融体系","date":"2016-03-02T11:44:49.000Z","_content":"#概要\n##对互联网金融的理解\n未完待续~\n![互联网金融体系](互联网金融体系/互联网金融.jpg)\n","source":"_posts/互联网金融体系.md","raw":"title: 互联网金融体系\ndate: 2016-03-02 19:44:49\ncategories: 职业\ntags: [脑图,互联网金融]\n---\n#概要\n##对互联网金融的理解\n未完待续~\n![互联网金融体系](互联网金融体系/互联网金融.jpg)\n","slug":"互联网金融体系","published":1,"updated":"2016-03-09T07:51:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vlj001mcn8e95l6blse"},{"title":"一些插件","date":"2016-03-07T07:24:06.000Z","toc":true,"_content":"#嵌入pdf\n{% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %}\n\n#嵌入优酷视频\n{% youku 480 400 %}\nXMTQ2MjU2NTU2OA\n{% endyouku %}\n\n#转义字符\n{% ruby Base|top %}\n\n{% ruby 佐天泪子|掀裙狂魔 %}\n\n{% ruby 超電磁砲|レールガン %}\n\n#表格\nABCD | EFGH | IGKL\n-----|------|----\na | b | c\nd | e | f\ng | h | i\n","source":"_posts/一些插件.md","raw":"title: 一些插件\ndate: 2016-03-07 15:24:06\ncategories: 技术\ntags: [plugins]\ntoc: true\n---\n#嵌入pdf\n{% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %}\n\n#嵌入优酷视频\n{% youku 480 400 %}\nXMTQ2MjU2NTU2OA\n{% endyouku %}\n\n#转义字符\n{% ruby Base|top %}\n\n{% ruby 佐天泪子|掀裙狂魔 %}\n\n{% ruby 超電磁砲|レールガン %}\n\n#表格\nABCD | EFGH | IGKL\n-----|------|----\na | b | c\nd | e | f\ng | h | i\n","slug":"一些插件","published":1,"updated":"2016-04-02T15:25:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vlp001scn8edly43zfk"},{"title":"zookeeper集群初识","date":"2015-06-17T11:25:56.000Z","toc":false,"_content":">今天研究了一下zookeeper，对于互联网公司来说，分布式架构是必须的，zookeeper正是针对分布式应用的高性能协调服务，提供包括配置维护、名字服务、分布式同步、组服务等。\n\n下面介绍一下配置zookeeper集群的过程\n1. 复制三个zookeeper，比如\n2. 配置每一个zookeeper的zoo.cfg，比如\n``` bash\ntickTime=2000    \ninitLimit=10\nsyncLimit=5\n#指定dataDir目录\ndataDir=/Users/bear_lee/development/zookeeper/data/zookeeper3\ndataLogDir=/Users/bear_lee/development/zookeeper/logs/zookeeper3\n#clientPort：zookeeper的端口号，在同一台机器下不同zookeeper端口号不能一样\nclientPort=2183\nserver.1=127.0.0.1:2881:3881\nserver.2=127.0.0.1:2882:3882\nserver.3=127.0.0.1:2883:3883\n```\n3. 在3个zookeeper的dataDir目录下面分别创建文件，取名myid，分别写入1、2、3。其中1，2，3分别指的是zoo.cfg文件中的server.1 server.2 server.3\n4. 启动3个zookeeper：\n``` python\n$ ./zkServer.sh start\n```\n5. 随便进入一个zookeeper，启动zkCli，然后我们会发现连接了另一个zookeeper，该zookeeper则是整个集群的leader\n``` python\n$ ./zkCli.sh\n```\n","source":"_posts/zookeeper集群初识.md","raw":"title: zookeeper集群初识\ndate: 2015-06-17 19:25:56\ncategories: 技术\ntags: [zookeeper,分布式]\ntoc: false\n---\n>今天研究了一下zookeeper，对于互联网公司来说，分布式架构是必须的，zookeeper正是针对分布式应用的高性能协调服务，提供包括配置维护、名字服务、分布式同步、组服务等。\n\n下面介绍一下配置zookeeper集群的过程\n1. 复制三个zookeeper，比如\n2. 配置每一个zookeeper的zoo.cfg，比如\n``` bash\ntickTime=2000    \ninitLimit=10\nsyncLimit=5\n#指定dataDir目录\ndataDir=/Users/bear_lee/development/zookeeper/data/zookeeper3\ndataLogDir=/Users/bear_lee/development/zookeeper/logs/zookeeper3\n#clientPort：zookeeper的端口号，在同一台机器下不同zookeeper端口号不能一样\nclientPort=2183\nserver.1=127.0.0.1:2881:3881\nserver.2=127.0.0.1:2882:3882\nserver.3=127.0.0.1:2883:3883\n```\n3. 在3个zookeeper的dataDir目录下面分别创建文件，取名myid，分别写入1、2、3。其中1，2，3分别指的是zoo.cfg文件中的server.1 server.2 server.3\n4. 启动3个zookeeper：\n``` python\n$ ./zkServer.sh start\n```\n5. 随便进入一个zookeeper，启动zkCli，然后我们会发现连接了另一个zookeeper，该zookeeper则是整个集群的leader\n``` python\n$ ./zkCli.sh\n```\n","slug":"zookeeper集群初识","published":1,"updated":"2016-03-02T07:42:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vlu001wcn8egikfvyzu"},{"title":"apache 包使用","date":"2016-08-30T10:00:04.000Z","_content":"## commons-lang\n- java基本对象方法的工具包，对字符串、数组等基本对象的操作，弥补java.lang.api本身不足\n\n## commons-beanutils\n- bean的包装\n```python\nBeanUtils.copyProperties(teacher,teacherForm);\n```\n\n## commons-cli\n- 处理命令的工具\n\n## commons-codec\n- 编码和解码用的\n\n## commons-collections\n- java.util的扩展\n\n## commons-configuration\n- 这个工具是用来帮助处理配置文件的，支持很多种存储方式\n```python\n  colors.background = #FFFFFF\n  colors.foreground = #000080\n  window.width = 500\n  window.height = 300\n  PropertiesConfiguration config = new PropertiesConfiguration(\"usergui.properties\");\n  config.setProperty(\"colors.background\", \"#000000\");\n  config.save();\n  config.save(\"usergui.backup.properties\");\n  Integer integer = config.getInteger(\"window.width\");\n```\n\n## commons-dbcp\n\n## commons-dbutils\n```python\nQueryRunner run = new QueryRunner(dataSource);\n```\n\n## commons-httpclient\n\n## commons-io\n- 可以看成是java.io的扩展，我觉得用起来非常方便。\n```python\n//读取steam\nIOUtils.toString(in) ;\nIOUtils.closeQuietly(in);\n//读取文件\nFileUtils.readLines(file, \"UTF-8\");\n//查看剩余空间\nFileSystemUtils.freeSpace(\"C:/\");\n```\n\n## commons-lang\n- 这个工具包可以看成是对java.lang的扩展。提供了诸如StringUtils, StringEscapeUtils, RandomStringUtils, Tokenizer, WordUtils等工具类。\n\n## commons-logging\n\n## commons-math\n\n## commons-net\n- 封装了很多网络协议\n1.    FTP\n2.    NNTP\n3.    SMTP\n4.    POP3\n5.    Telnet\n6.    TFTP\n7.    Finger\n8.    Whois\n9.    rexec/rcmd/rlogin\n10.    Time (rdate) and Daytime\n11.    Echo\n12.    Discard\n13.    NTP/SNTP\n\n## commons-validator\n- 用来帮助进行验证的工具。比如验证Email字符串，日期字符串等是否合法。\n","source":"_posts/apache-包使用.md","raw":"title: apache 包使用\ndate: 2016-08-30 18:00:04\ncategories: 技术\ntags: [java,commons]\n---\n## commons-lang\n- java基本对象方法的工具包，对字符串、数组等基本对象的操作，弥补java.lang.api本身不足\n\n## commons-beanutils\n- bean的包装\n```python\nBeanUtils.copyProperties(teacher,teacherForm);\n```\n\n## commons-cli\n- 处理命令的工具\n\n## commons-codec\n- 编码和解码用的\n\n## commons-collections\n- java.util的扩展\n\n## commons-configuration\n- 这个工具是用来帮助处理配置文件的，支持很多种存储方式\n```python\n  colors.background = #FFFFFF\n  colors.foreground = #000080\n  window.width = 500\n  window.height = 300\n  PropertiesConfiguration config = new PropertiesConfiguration(\"usergui.properties\");\n  config.setProperty(\"colors.background\", \"#000000\");\n  config.save();\n  config.save(\"usergui.backup.properties\");\n  Integer integer = config.getInteger(\"window.width\");\n```\n\n## commons-dbcp\n\n## commons-dbutils\n```python\nQueryRunner run = new QueryRunner(dataSource);\n```\n\n## commons-httpclient\n\n## commons-io\n- 可以看成是java.io的扩展，我觉得用起来非常方便。\n```python\n//读取steam\nIOUtils.toString(in) ;\nIOUtils.closeQuietly(in);\n//读取文件\nFileUtils.readLines(file, \"UTF-8\");\n//查看剩余空间\nFileSystemUtils.freeSpace(\"C:/\");\n```\n\n## commons-lang\n- 这个工具包可以看成是对java.lang的扩展。提供了诸如StringUtils, StringEscapeUtils, RandomStringUtils, Tokenizer, WordUtils等工具类。\n\n## commons-logging\n\n## commons-math\n\n## commons-net\n- 封装了很多网络协议\n1.    FTP\n2.    NNTP\n3.    SMTP\n4.    POP3\n5.    Telnet\n6.    TFTP\n7.    Finger\n8.    Whois\n9.    rexec/rcmd/rlogin\n10.    Time (rdate) and Daytime\n11.    Echo\n12.    Discard\n13.    NTP/SNTP\n\n## commons-validator\n- 用来帮助进行验证的工具。比如验证Email字符串，日期字符串等是否合法。\n","slug":"apache-包使用","published":1,"updated":"2016-08-31T04:44:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vm00021cn8ezw4tbaxf"},{"title":"Mysql5.7新特性之json与虚拟索引列","date":"2016-04-13T14:40:02.000Z","toc":true,"_content":"# 1.整体介绍\n> 最近公司在搞一个项目，感觉mysql5.7的json非常适合这个项目场景，但是对这个新特性没有一个深入的了解，于是便让我对Mysql5.7进行一个性能上的测试，其目的就是为了核实两个场景：\n> - 在相同数据量的情况下，json字段与普通字段对聚合函数操作性能上的差异\n> - 在相同数据量的情况下，虚拟索引列与普通二级索引列查询性能上的差异想\n\n先来看一下DDL:\n``` python\nCREATE TABLE ding_ding\n(\nid bigint NOT NULL AUTO_INCREMENT,\nappId INT NOT NULL,\namount BIGINT NOT NULL,\naccountDate DATE NOT NULL,\nmobile varchar(128) not null,\ninstValue json not null,\nPRIMARY KEY (id),\nINDEX index_appId (appId),\nINDEX index_accountDate (accountDate),\n)\nENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n<!--more-->\n\n插入数据：\n``` python\nINSERT INTO ding_ding (id, appId, amount, accountDate, mobile, instValue) VALUES (1, 2, 858, '2016-03-14', '15002232698', '{\"appId\": 2, \"amount\": 858, \"mobile\": \"15002232698\", \"accountDate\": 1457969652057}');\nINSERT INTO ding_ding (id, appId, amount, accountDate, mobile, instValue) VALUES (2, 3, 254, '2016-01-16', '15002232690', '{\"appId\": 3, \"amount\": 254, \"mobile\": \"15002232690\", \"accountDate\": 1452959310695}');\n........\n```\n分别为instValue字段的appId和accountDate创建虚拟列以及二级索引：\n``` python\nALTER TABLE ding_ding ADD virtualAppId int GENERATED ALWAYS AS (json_extract(instValue,'$.appId')) VIRTUAL;\nALTER TABLE ding_ding ADD index index_virtual_appId (virtualAppId);\nALTER TABLE ding_ding ADD virtualAccountDate date GENERATED ALWAYS AS (from_unixtime(instValue->\"$.accountDate\"/1000)) VIRTUAL;\nALTER TABLE ding_ding ADD index index_virtual_accountDate (virtualAccountDate);\n```\n好，大功告成！下面要对以上几点进行解析,分别是：\n1. mysql5.7的json类型字段\n2. generated column是什么\n3. virtual index column\n5. 性能测试数据表\n6. 题外话，generated column上创建索引与Oracle的函数索引的区别\n\n# 2.mysql5.7的json类型字段\n在mysql5.7以后，新增了对json数据类型的支持，这个特性真的是让人振奋人心，本来mysql是传统的关系型数据库，这次有了json支持，我个人感觉真的可以秒杀所有nosql了！一大堆文档数据库们已经哭晕在厕所有木有！\n下面来看一下官方给出的json特性：\n- JSON数据有效性检查：BLOB类型无法在数据库层做这样的约束性检查\n- 查询性能的提升：查询不需要遍历所有字符串才能找到数据\n- 支持索引：通过虚拟列的功能可以对JSON中的部分数据进行索引\n\n# 3.generated column是什么\ngenerated column是MySQL 5.7引入的新特性，所谓generated column，就是数据库中这一列由其他列计算而得，我们以官方参考手册中的例子予以说明。\n例如：对于直角三角形来说，a²+b²=c²。很明显，只要知道a和b，就可以算出c，这时候数据库里只存放a和b，斜边c使用generated column\n``` python\nCREATE TABLE triangle (\n  sidea DOUBLE,\n  sideb DOUBLE,\n  sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb))\n);\nINSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);\n```\n查询结果：\n``` python\nmysql> SELECT * FROM triangle;\n+-------+-------+--------------------+\n| sidea | sideb | sidec              |\n+-------+-------+--------------------+\n|     1 |     1 | 1.4142135623730951 |\n|     3 |     4 |                  5 |\n|     6 |     8 |                 10 |\n+-------+-------+--------------------+\n```\n官方给出使用generated column的好处：\n> Stored generated columns can be used as a materialized cache for complicated conditions that are costly to calculate on the fly.\n> 我理解的意思就是generated column可以极大提升复杂条件计算出来的列的性能\n\n有了上述理解，我们可以更好的理解项目中这句话：\n``` python\nALTER TABLE ding_ding ADD virtualAccountDate date GENERATED ALWAYS AS (from_unixtime(instValue->\"$.accountDate\"/1000)) VIRTUAL;\n```\n这里的<font color='red'><b>GENERATED ALWAYS AS</b></font>的意思就是说以后每次插入的新数据，都是通过规则将virtualAccountDate列计算出来的，在这里是通过获取json字段类型key为accountDate的数据\n\n# 4.virtual index column\n除了mysql5.7对json特性支持以外，另一个让人振奋人心的莫过于新增了虚拟列的这样一个东西。\n顾名思义，virtual column就是一个虚拟列，在MySQL 5.7中，支持两种generated column，即virtual generated column和stored generated column，前者只将generated column保存在数据字典中（表的元数据），并不会将这一列数据持久化到磁盘上；后者会将generated column持久化到磁盘上，而不是每次读取的时候计算所得。很明显，后者存放了可以通过已有数据计算而得的数据，需要更多的磁盘空间，与virtual column相比并没有优势，因此，MySQL 5.7中，不指定generated column的类型，默认是virtual column。此外\n- stored generated column性能较差\n- 如果需要stored generated column的话，可能在generated column上建立索引更加合适\n知道了什么是虚拟列，那么虚拟索引列当然是虚拟列加上索引喽！当然了，虚拟索引列也是通过传统的B+树索引即可实现对JSON格式部分属性的快速查询。使用方法是首先创建该虚拟列，然后在该虚拟列上创建索引：\n``` python\nALTER TABLE ding_ding ADD virtualAppId int GENERATED ALWAYS AS (json_extract(instValue,'$.appId')) VIRTUAL;\nALTER TABLE ding_ding ADD index index_virtual_appId (virtualAppId);\n```\n下面看一下官方文档对virtual和stored解释：\n- VIRTUAL : Column values are not stored, but are evaluated when rows are read, immediately after any BEFORE triggers.\n列值不存储，而是被读取行时进行评估，之后立即用 BEFORE触发器。虚拟列不带存储。\n- STORED : Column values are evaluated and stored when rows are inserted or updated.\n列值进行评估，并行被插入或更新时存储。存放的列确实需要的存储空间，并可以被索引。\n> 友情提示：\n> - 在MySQL 5.7.8之前，虚拟列不能建立索引。在MySQL 5.7.8，InnoDB的支持在虚拟列辅助索引\n> - json类型字段不支持直接索引\n> - 虚拟索引列只支持二级索引，其它的索引类型不支持\n> - 虚拟索引列不能被当做一个外键来使用\n> - 添加或在虚拟列删除一个辅助索引是就地操作。 Adding or dropping a secondary index on a virtual column is an in-place operation.\n\n# 5.性能测试数据表\n下面是在20W/100W/500W数据的情况下，json字段与普通字段对聚合函数操作性能上的差异\n![sum](Mysql5.7新特性之json与虚拟索引列/SUM.jpeg)\n![count](Mysql5.7新特性之json与虚拟索引列/COUNT.jpeg)\n![COUNT(DISTICT)](Mysql5.7新特性之json与虚拟索引列/COUNT_DISTICT.jpeg)\n![MAX](Mysql5.7新特性之json与虚拟索引列/MAX.jpeg)\n![MIN](Mysql5.7新特性之json与虚拟索引列/MIN.jpeg)\n![AVG](Mysql5.7新特性之json与虚拟索引列/AVG.jpeg)\n![virtual_index](Mysql5.7新特性之json与虚拟索引列/virtual_index.jpeg)\n\n> 上面的测试结果也验证了之前的两个场景：\n> mysql5.7上，在相同数据量的情况下，虚拟索引和普通索引查询效率基本一致\n> 在大数据量情况下不推荐用聚合函数计算json数据，但是如果json key建立了虚拟列，可以对该虚拟列进行聚合操作，效率跟普通列一样\n\n我们可以发现，对于有些业务比如根据日期范围汇总金额的这种场景，在json里key为amount的情况下，我们可以把amount单独建立一个虚拟列virtualAmount，然后做汇总的时候使用sum(virtualAmount)，效率要比直接使用sum(json->\"$.amount\")大得多！\n\n# 6.题外话，generated column上创建索引与Oracle的函数索引的区别\n介绍完MySQL在generated column上的索引，熟悉Oracle的同学这时候可能会想起Oracle的函数索引，在MySQL的generated column列上建立索引与Oracle的函数索引比较类似，又有所区别：\n例如，我们有一张表，如下所示：\n``` python\nCREATE TABLE t1 (first_name VARCHAR(10), last_name VARCHAR(10));\nQuery OK, 0 rows affected (0.11 sec)\n```\n假设这时候需要建一个full_name的索引，在Oracle中，我们可以直接在创建索引的时候使用函数，如下所示：\n``` python\nalter table t1 add index full_name_idx(CONCAT(first_name,' ',last_name));\n```\n但是，上面这条语句在MySQL中就会报错。在MySQL中，我们可以先新建一个generated column，然后再在这个generated column上建索引，如下所示：\n``` python\nmysql> alter table t1 add column full_name VARCHAR(255) GENERATED ALWAYS AS (CONCAT(first_name,' ',last_name));\nmysql> alter table t1 add index full_name_idx(full_name);\n```\n乍一看，MySQL需要在表上增加一列，才能够实现类似Oracle的函数索引，似乎代价会高很多。但是，我们在第2部分说过，对于virtual generated column，MySQL只是将这一列的元信息保存在数据字典中，并不会将这一列数据持久化到磁盘上，因此，在MySQL的virtual generated column上建立索引和Oracle的函数索引类似，并不需要更多的代价，只是使用方式有点不一样而已。\n","source":"_posts/Mysql5-7新特性之json与虚拟索引列.md","raw":"title: Mysql5.7新特性之json与虚拟索引列\ndate: 2016-04-13 22:40:02\ncategories: 技术\ntags: [mysql,json]\ntoc: true\n---\n# 1.整体介绍\n> 最近公司在搞一个项目，感觉mysql5.7的json非常适合这个项目场景，但是对这个新特性没有一个深入的了解，于是便让我对Mysql5.7进行一个性能上的测试，其目的就是为了核实两个场景：\n> - 在相同数据量的情况下，json字段与普通字段对聚合函数操作性能上的差异\n> - 在相同数据量的情况下，虚拟索引列与普通二级索引列查询性能上的差异想\n\n先来看一下DDL:\n``` python\nCREATE TABLE ding_ding\n(\nid bigint NOT NULL AUTO_INCREMENT,\nappId INT NOT NULL,\namount BIGINT NOT NULL,\naccountDate DATE NOT NULL,\nmobile varchar(128) not null,\ninstValue json not null,\nPRIMARY KEY (id),\nINDEX index_appId (appId),\nINDEX index_accountDate (accountDate),\n)\nENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n<!--more-->\n\n插入数据：\n``` python\nINSERT INTO ding_ding (id, appId, amount, accountDate, mobile, instValue) VALUES (1, 2, 858, '2016-03-14', '15002232698', '{\"appId\": 2, \"amount\": 858, \"mobile\": \"15002232698\", \"accountDate\": 1457969652057}');\nINSERT INTO ding_ding (id, appId, amount, accountDate, mobile, instValue) VALUES (2, 3, 254, '2016-01-16', '15002232690', '{\"appId\": 3, \"amount\": 254, \"mobile\": \"15002232690\", \"accountDate\": 1452959310695}');\n........\n```\n分别为instValue字段的appId和accountDate创建虚拟列以及二级索引：\n``` python\nALTER TABLE ding_ding ADD virtualAppId int GENERATED ALWAYS AS (json_extract(instValue,'$.appId')) VIRTUAL;\nALTER TABLE ding_ding ADD index index_virtual_appId (virtualAppId);\nALTER TABLE ding_ding ADD virtualAccountDate date GENERATED ALWAYS AS (from_unixtime(instValue->\"$.accountDate\"/1000)) VIRTUAL;\nALTER TABLE ding_ding ADD index index_virtual_accountDate (virtualAccountDate);\n```\n好，大功告成！下面要对以上几点进行解析,分别是：\n1. mysql5.7的json类型字段\n2. generated column是什么\n3. virtual index column\n5. 性能测试数据表\n6. 题外话，generated column上创建索引与Oracle的函数索引的区别\n\n# 2.mysql5.7的json类型字段\n在mysql5.7以后，新增了对json数据类型的支持，这个特性真的是让人振奋人心，本来mysql是传统的关系型数据库，这次有了json支持，我个人感觉真的可以秒杀所有nosql了！一大堆文档数据库们已经哭晕在厕所有木有！\n下面来看一下官方给出的json特性：\n- JSON数据有效性检查：BLOB类型无法在数据库层做这样的约束性检查\n- 查询性能的提升：查询不需要遍历所有字符串才能找到数据\n- 支持索引：通过虚拟列的功能可以对JSON中的部分数据进行索引\n\n# 3.generated column是什么\ngenerated column是MySQL 5.7引入的新特性，所谓generated column，就是数据库中这一列由其他列计算而得，我们以官方参考手册中的例子予以说明。\n例如：对于直角三角形来说，a²+b²=c²。很明显，只要知道a和b，就可以算出c，这时候数据库里只存放a和b，斜边c使用generated column\n``` python\nCREATE TABLE triangle (\n  sidea DOUBLE,\n  sideb DOUBLE,\n  sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb))\n);\nINSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);\n```\n查询结果：\n``` python\nmysql> SELECT * FROM triangle;\n+-------+-------+--------------------+\n| sidea | sideb | sidec              |\n+-------+-------+--------------------+\n|     1 |     1 | 1.4142135623730951 |\n|     3 |     4 |                  5 |\n|     6 |     8 |                 10 |\n+-------+-------+--------------------+\n```\n官方给出使用generated column的好处：\n> Stored generated columns can be used as a materialized cache for complicated conditions that are costly to calculate on the fly.\n> 我理解的意思就是generated column可以极大提升复杂条件计算出来的列的性能\n\n有了上述理解，我们可以更好的理解项目中这句话：\n``` python\nALTER TABLE ding_ding ADD virtualAccountDate date GENERATED ALWAYS AS (from_unixtime(instValue->\"$.accountDate\"/1000)) VIRTUAL;\n```\n这里的<font color='red'><b>GENERATED ALWAYS AS</b></font>的意思就是说以后每次插入的新数据，都是通过规则将virtualAccountDate列计算出来的，在这里是通过获取json字段类型key为accountDate的数据\n\n# 4.virtual index column\n除了mysql5.7对json特性支持以外，另一个让人振奋人心的莫过于新增了虚拟列的这样一个东西。\n顾名思义，virtual column就是一个虚拟列，在MySQL 5.7中，支持两种generated column，即virtual generated column和stored generated column，前者只将generated column保存在数据字典中（表的元数据），并不会将这一列数据持久化到磁盘上；后者会将generated column持久化到磁盘上，而不是每次读取的时候计算所得。很明显，后者存放了可以通过已有数据计算而得的数据，需要更多的磁盘空间，与virtual column相比并没有优势，因此，MySQL 5.7中，不指定generated column的类型，默认是virtual column。此外\n- stored generated column性能较差\n- 如果需要stored generated column的话，可能在generated column上建立索引更加合适\n知道了什么是虚拟列，那么虚拟索引列当然是虚拟列加上索引喽！当然了，虚拟索引列也是通过传统的B+树索引即可实现对JSON格式部分属性的快速查询。使用方法是首先创建该虚拟列，然后在该虚拟列上创建索引：\n``` python\nALTER TABLE ding_ding ADD virtualAppId int GENERATED ALWAYS AS (json_extract(instValue,'$.appId')) VIRTUAL;\nALTER TABLE ding_ding ADD index index_virtual_appId (virtualAppId);\n```\n下面看一下官方文档对virtual和stored解释：\n- VIRTUAL : Column values are not stored, but are evaluated when rows are read, immediately after any BEFORE triggers.\n列值不存储，而是被读取行时进行评估，之后立即用 BEFORE触发器。虚拟列不带存储。\n- STORED : Column values are evaluated and stored when rows are inserted or updated.\n列值进行评估，并行被插入或更新时存储。存放的列确实需要的存储空间，并可以被索引。\n> 友情提示：\n> - 在MySQL 5.7.8之前，虚拟列不能建立索引。在MySQL 5.7.8，InnoDB的支持在虚拟列辅助索引\n> - json类型字段不支持直接索引\n> - 虚拟索引列只支持二级索引，其它的索引类型不支持\n> - 虚拟索引列不能被当做一个外键来使用\n> - 添加或在虚拟列删除一个辅助索引是就地操作。 Adding or dropping a secondary index on a virtual column is an in-place operation.\n\n# 5.性能测试数据表\n下面是在20W/100W/500W数据的情况下，json字段与普通字段对聚合函数操作性能上的差异\n![sum](Mysql5.7新特性之json与虚拟索引列/SUM.jpeg)\n![count](Mysql5.7新特性之json与虚拟索引列/COUNT.jpeg)\n![COUNT(DISTICT)](Mysql5.7新特性之json与虚拟索引列/COUNT_DISTICT.jpeg)\n![MAX](Mysql5.7新特性之json与虚拟索引列/MAX.jpeg)\n![MIN](Mysql5.7新特性之json与虚拟索引列/MIN.jpeg)\n![AVG](Mysql5.7新特性之json与虚拟索引列/AVG.jpeg)\n![virtual_index](Mysql5.7新特性之json与虚拟索引列/virtual_index.jpeg)\n\n> 上面的测试结果也验证了之前的两个场景：\n> mysql5.7上，在相同数据量的情况下，虚拟索引和普通索引查询效率基本一致\n> 在大数据量情况下不推荐用聚合函数计算json数据，但是如果json key建立了虚拟列，可以对该虚拟列进行聚合操作，效率跟普通列一样\n\n我们可以发现，对于有些业务比如根据日期范围汇总金额的这种场景，在json里key为amount的情况下，我们可以把amount单独建立一个虚拟列virtualAmount，然后做汇总的时候使用sum(virtualAmount)，效率要比直接使用sum(json->\"$.amount\")大得多！\n\n# 6.题外话，generated column上创建索引与Oracle的函数索引的区别\n介绍完MySQL在generated column上的索引，熟悉Oracle的同学这时候可能会想起Oracle的函数索引，在MySQL的generated column列上建立索引与Oracle的函数索引比较类似，又有所区别：\n例如，我们有一张表，如下所示：\n``` python\nCREATE TABLE t1 (first_name VARCHAR(10), last_name VARCHAR(10));\nQuery OK, 0 rows affected (0.11 sec)\n```\n假设这时候需要建一个full_name的索引，在Oracle中，我们可以直接在创建索引的时候使用函数，如下所示：\n``` python\nalter table t1 add index full_name_idx(CONCAT(first_name,' ',last_name));\n```\n但是，上面这条语句在MySQL中就会报错。在MySQL中，我们可以先新建一个generated column，然后再在这个generated column上建索引，如下所示：\n``` python\nmysql> alter table t1 add column full_name VARCHAR(255) GENERATED ALWAYS AS (CONCAT(first_name,' ',last_name));\nmysql> alter table t1 add index full_name_idx(full_name);\n```\n乍一看，MySQL需要在表上增加一列，才能够实现类似Oracle的函数索引，似乎代价会高很多。但是，我们在第2部分说过，对于virtual generated column，MySQL只是将这一列的元信息保存在数据字典中，并不会将这一列数据持久化到磁盘上，因此，在MySQL的virtual generated column上建立索引和Oracle的函数索引类似，并不需要更多的代价，只是使用方式有点不一样而已。\n","slug":"Mysql5-7新特性之json与虚拟索引列","published":1,"updated":"2016-05-05T13:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vm30026cn8epgx15xmz"},{"title":"Guava库介绍之集合相关的API","date":"2016-03-31T11:28:25.000Z","toc":true,"_content":"# 1.一些小功能\n## 集合声明更简单\nJava中同质的范型集合是一个很大的特色，但是有些时候他们的构造函数有点太啰嗦了，比如：\n``` python\nMap<String, Map<String, Integer>> lookup = new HashMap<String, Map<String, Integer>>();\n```\n在Java 7中通过钻石操作符<>来允许有限的非正式的类型推导。上面的例子可以这样写：\n``` python\nMap<String, Map<String, Integer>> lookup = new HashMap<>();\n```\nGuava提供了一些使用范型来进行右侧类型推导的静态函数，使得集合的声明更简单,上面的例子可以这么写：\n\n<!--more-->\n\n``` python\nMap<String, Map<String, String>> map = Maps.newHashMap();\nList<List<Map<String, String>>> list = Lists.newArrayList();\n```\n## 集合初始化更简单\n``` python\nSet<String> set = Sets.newHashSet(\"one\", \"two\", \"three\");\nMap<String, String> map = ImmutableMap.of(\"ON\", true, \"OFF\", false);\n```\n\n# 2.不可变性(Immutability)\n大部分Google提供的集合都提供不可变的版本。\n当你不会修改一个集合，或者期望一个集合是固定不变的，那么一个很好的习惯是防御式地把它拷贝成一个不可变的集合。\n\n注意\n> Guava中提供的不可变集合的实现是不允许有空值`null`的。因为通过研究Google内部代码库发现在集合中，只有5%的情况下是允许有空值的，剩下的95%情况下最好是遇到空值就快速失败(failing fast)。如果需要空值，可以使用JDK中提供的 Collections.unmodifiableList 这类允许空值的集合实现。\n\n更多关于使用或者避免使用null的细节见Using And Avoiding Null Explained\n\n不可变的好处：\n- 可以放心的给不信任的库使用\n- 线程安全:可以被多个线程使用而不会有竞争条件发生\n- 不需要同步(synchronization)的逻辑，不需要支持互斥\n- 设计和实现很简单。所有不可变的集合实现比可变版本的内存效率要高，分析见这里\n\n### 如何使用\n有多种方法来得到一个不可变的集合：\n1. 使用of函数\n``` python\nImmutableSet<Integer> numbers = ImmutableSet.of(10, 30, 40, 50);\n```\n2. 使用copyOf函数\n``` python\nImmutableSet<Integer> another = ImmutableSet.copyOf(numberSet);\n```\n\n所有不可变的集合都通过asList()提供了一个不可变的List(ImmutableList)视图。例如数据存储在一个ImmutableSortedSet里，可以通过sortedSet.asList().get(k)来获得第k个最小的元素。\nJDK虽然提供了Collections.unmodifiableXXX方法，但是有一些问题：\n- 非常笨重，使用起来很啰嗦，用着不爽\n- 不安全：只有当没有对原始集合的引用时，这个函数返回的集合才是真的不可变的\n- 不够高效：数据结构里还是有可变集合里关于并发修改的检查，存储哈希表的额外空间等。\n\n# 3.新的集合类型\nGuava引入的新的集合类型并没有暴露原始的构造函数，或者提供方便初始化操作的工具类，而是直接使用静态工厂函数，例如：\n``` python\nMultiMap<String, Integer> multiMap = HashMultiMap.create();\n```\n如果想让Value排序，可以使用SortedMultiSet\n## MultiMap\n容许一个key有多个值的MultiMap, MultiMap<K, V>可以取代传统的Map<K, Collection<V>>。也可以使用值为链表的ListMultiMap或者集合SetMultiMap。\n## Multiset\nMultiset支持添加多次相同的值，支持对值进行计数。\n``` python\nMultiset<Integer> multiSet = HashMultiset.create();\nmultiSet.add(10);\nmultiSet.add(30);\nmultiSet.add(30);\nmultiSet.add(40);\nmultiSet.count(30); // 2\nmultiSet.size(); // 4\n```\n## Table\n表结构的数据类型Table,它像Map一样，但是支持两种键--行键(row key)和列键(column key)。\n\n# 4.谓语(Predicate)和过滤器(Filter)\n谓语(Predicate)是一个只包含一个返回布尔类型的函数的简单接口。它的作用是给定一个输入，判断是否满足条件。它可以用来过滤集合，例如实现一个过滤出老客户的Predicate。\n``` python\nstatic class LoyalCustomer implements Predicate<Customer> {\n    public boolean apply(Customer customer) {\n        return CustomerType.LOYAL == customer.getCustomerType();\n    }\n}\nCollection<Customer> loyalCustomers =   Collections2.filter(customers, new LoyalCustomer());\n```\nfilter函数的语法是：\nCollection<E> filter(Collection<E> unfiltered, Predicate<E> predicate)\n内置的Predicate\nPredicates类包含了and，or，not in这几个静态函数来方便构建复杂的谓语。\n``` python\nPredicate<String> commonList = and(in(list1), in(list2, or(in(list3));\n```\nPredicates类也包含了很多非常方便的函数，例如notNull, instanceOf, contains等。\n``` python\nSortedMaps.filterValues(map, Predicates.notNull());\n\nSortedMaps.filterValues(map, Predicates.notNull());\n```\n","source":"_posts/Guava库介绍之集合相关的API.md","raw":"title: Guava库介绍之集合相关的API\ndate: 2016-03-31 19:28:25\ncategories: 技术\ntags: [Guava,工具]\ntoc: true\n---\n# 1.一些小功能\n## 集合声明更简单\nJava中同质的范型集合是一个很大的特色，但是有些时候他们的构造函数有点太啰嗦了，比如：\n``` python\nMap<String, Map<String, Integer>> lookup = new HashMap<String, Map<String, Integer>>();\n```\n在Java 7中通过钻石操作符<>来允许有限的非正式的类型推导。上面的例子可以这样写：\n``` python\nMap<String, Map<String, Integer>> lookup = new HashMap<>();\n```\nGuava提供了一些使用范型来进行右侧类型推导的静态函数，使得集合的声明更简单,上面的例子可以这么写：\n\n<!--more-->\n\n``` python\nMap<String, Map<String, String>> map = Maps.newHashMap();\nList<List<Map<String, String>>> list = Lists.newArrayList();\n```\n## 集合初始化更简单\n``` python\nSet<String> set = Sets.newHashSet(\"one\", \"two\", \"three\");\nMap<String, String> map = ImmutableMap.of(\"ON\", true, \"OFF\", false);\n```\n\n# 2.不可变性(Immutability)\n大部分Google提供的集合都提供不可变的版本。\n当你不会修改一个集合，或者期望一个集合是固定不变的，那么一个很好的习惯是防御式地把它拷贝成一个不可变的集合。\n\n注意\n> Guava中提供的不可变集合的实现是不允许有空值`null`的。因为通过研究Google内部代码库发现在集合中，只有5%的情况下是允许有空值的，剩下的95%情况下最好是遇到空值就快速失败(failing fast)。如果需要空值，可以使用JDK中提供的 Collections.unmodifiableList 这类允许空值的集合实现。\n\n更多关于使用或者避免使用null的细节见Using And Avoiding Null Explained\n\n不可变的好处：\n- 可以放心的给不信任的库使用\n- 线程安全:可以被多个线程使用而不会有竞争条件发生\n- 不需要同步(synchronization)的逻辑，不需要支持互斥\n- 设计和实现很简单。所有不可变的集合实现比可变版本的内存效率要高，分析见这里\n\n### 如何使用\n有多种方法来得到一个不可变的集合：\n1. 使用of函数\n``` python\nImmutableSet<Integer> numbers = ImmutableSet.of(10, 30, 40, 50);\n```\n2. 使用copyOf函数\n``` python\nImmutableSet<Integer> another = ImmutableSet.copyOf(numberSet);\n```\n\n所有不可变的集合都通过asList()提供了一个不可变的List(ImmutableList)视图。例如数据存储在一个ImmutableSortedSet里，可以通过sortedSet.asList().get(k)来获得第k个最小的元素。\nJDK虽然提供了Collections.unmodifiableXXX方法，但是有一些问题：\n- 非常笨重，使用起来很啰嗦，用着不爽\n- 不安全：只有当没有对原始集合的引用时，这个函数返回的集合才是真的不可变的\n- 不够高效：数据结构里还是有可变集合里关于并发修改的检查，存储哈希表的额外空间等。\n\n# 3.新的集合类型\nGuava引入的新的集合类型并没有暴露原始的构造函数，或者提供方便初始化操作的工具类，而是直接使用静态工厂函数，例如：\n``` python\nMultiMap<String, Integer> multiMap = HashMultiMap.create();\n```\n如果想让Value排序，可以使用SortedMultiSet\n## MultiMap\n容许一个key有多个值的MultiMap, MultiMap<K, V>可以取代传统的Map<K, Collection<V>>。也可以使用值为链表的ListMultiMap或者集合SetMultiMap。\n## Multiset\nMultiset支持添加多次相同的值，支持对值进行计数。\n``` python\nMultiset<Integer> multiSet = HashMultiset.create();\nmultiSet.add(10);\nmultiSet.add(30);\nmultiSet.add(30);\nmultiSet.add(40);\nmultiSet.count(30); // 2\nmultiSet.size(); // 4\n```\n## Table\n表结构的数据类型Table,它像Map一样，但是支持两种键--行键(row key)和列键(column key)。\n\n# 4.谓语(Predicate)和过滤器(Filter)\n谓语(Predicate)是一个只包含一个返回布尔类型的函数的简单接口。它的作用是给定一个输入，判断是否满足条件。它可以用来过滤集合，例如实现一个过滤出老客户的Predicate。\n``` python\nstatic class LoyalCustomer implements Predicate<Customer> {\n    public boolean apply(Customer customer) {\n        return CustomerType.LOYAL == customer.getCustomerType();\n    }\n}\nCollection<Customer> loyalCustomers =   Collections2.filter(customers, new LoyalCustomer());\n```\nfilter函数的语法是：\nCollection<E> filter(Collection<E> unfiltered, Predicate<E> predicate)\n内置的Predicate\nPredicates类包含了and，or，not in这几个静态函数来方便构建复杂的谓语。\n``` python\nPredicate<String> commonList = and(in(list1), in(list2, or(in(list3));\n```\nPredicates类也包含了很多非常方便的函数，例如notNull, instanceOf, contains等。\n``` python\nSortedMaps.filterValues(map, Predicates.notNull());\n\nSortedMaps.filterValues(map, Predicates.notNull());\n```\n","slug":"Guava库介绍之集合相关的API","published":1,"updated":"2016-03-31T12:25:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vmq002ccn8ezag6i143"},{"title":"7年老人谈些新人成长经验","date":"2016-05-05T13:21:38.000Z","_content":"在阿里差不多快7个年头了，这7年中自己的确也学到了很多，这其中有我自己的切身感受也有些通过观察别人总结的一些经验，去年的时候团队新人经常问我的，一直想写没写，在那么多的答案中，可能我觉得比较有价值的分享给大家，这些也不一定都对，但是对我来说都是真心想说的话。这些话有些包括我自己也不一定都实践的很好，也在不停的学习中，但还是要先具备这种意识才行。\n\n先做事\n有很多新同学刚过来，有很多困惑，到底是做技术还是做业务？是每天加班加点写代码还是周末要空点时间来看书学习？是先追求广度还是先钻研一门技术？是两耳不闻窗外事的一心埋头做事还是和同事打成一片参加各种活动？等等这些问题也曾经困扰了我，差不多以一个过来人的角度再回头看一下我的一些理解。\n\n<!--more-->\n\n其实我觉得新人到一个团队最关键的是在前3年建立起个人品牌，为什么？我觉得其中有些逻辑可以和大家分享下，当别人对你完全不了解的情况下，你做的第一件事是非常重要的。很多情况下你给别人留下的印象会蔓延到整个公司，所以交给你的第一件事情一定要做好，怎么才叫做好，在目前这个职场中，其实根本就不需要比拼大家智商的时候，大部分情况下，做事认真一点、考虑的更深入一点、积极主动一点这几点都做好，你基本已经好于70%的同学了，好于70%的同学我们都称之为“靠谱”。把每件事情做好，并且在当中建立起自己的分别心，比如做技术的，要在某一方面成为一个团队的专家，在这个领域要成为权威，目标就是做出一件令人佩服的成果，逐渐建立起自己的影响力。\n\n获得了合作伙伴包括主管的认可，自然获得的机会就会更多，做的事情也会越复杂，你的合作伙伴以及和你一起做的小伙伴也会越来越强，这样就会形成正循环，你的成长就会比较快。所以前3年通过做事形成自己的影响力，积累自己的人脉。锻炼自己的对未知事物的判断能力，因为随着你做的事情越来越多，你的专业知识能够覆盖度就会越来越少，你会遇到越来越多的你不懂的领域。但是你不可能把你所有不知道的知识都掌握一遍，所以培养自己的判断能力就非常重要了，这个判断包括对事物未知发展方向的判断、事情产生价值的判断、以及对人的判断等。\n\n所谓后3年做人，是更多的发挥出人的价值，不仅仅把事做好就行，包括在合适的时间做合适的事情可以产生更大的价值，在公司里做先烈的情况有很多；找到多个团队的共同价值点把事情一起做好，其实这个最难，因为越有价值的事情，涉及到的利益方也会越多，所以平衡好各个利益方的诉求是事情成败的关键；事情做好后还要有影响力的人帮你宣传等。这个当中可能会涉及到人的性格、交际能力、向上管理等综合能力（这个需要很高的情商我也不擅长，也在学习中，就不详谈了，呵呵）。\n\n善与发现兴奋点\n新同学刚入职时，一般所做事情的难度都不大，这个时候很容易会形成落差，像阿里目前招的都是学校里面的尖子，但是有时候到岗位上后发现每天做的事情都是一些琐碎的事，所以会感到失望。如果长期不调整好心态后很难把自己的工作激情发挥出来，所以也就慢慢平庸下去。我可以说一下我在阿里的一些经验，当初我和大部分同学一样，一开始也是从最基本的日常开始做起，当时我对做这些事情的自己的要求是，代码层面不出bug、注释要写清楚，按时发布，这些都是最基本的要求；但是我会利用业余时间做好几件事情：\n\n1. 发现工作中可以提升效率的地方，可以把琐事的事情工具化，我记得当时在做一个搜索需求时，发现传给搜索的参与非常多，而且每次拼URL非常麻烦，而且这个是给运营同学在用，所以我就做了一个页面，把每个参数做成表单，然后运营同学只要在对应的字段（自动的含义有说明）表单中填入值，就可以自动生成最终的URL。提升了运营同学生成URL的效率。当然做出来后，也肯定受到了运营同学的好评。\n\n2. 除了发现工作中可以提升的效率外，还可以积累一些人品，比如当时我们有个小图书馆，有个同学需要记录每周每个同学借了那些书，什么时候还等信息，这些还都是人肉记录的方式，所以我当时就做了个图书管理系统给那个同学用，当时也积累不少人品。\n\n3. 除了在主动性和积累人品外，最重要的还是要积累自己的技能，我会把在公司用到的中间件都深入学习一遍，并且写成学习文档，和其他同学写那种简单的使用心得型的文档不同，我写的学习文档都是分析设计原理性的，更多的分析为什么这么设计，用到了哪些设计模式、关键的技术点分析这些；这种文章对那些工作几年对中间件熟悉的同学也会有兴趣来看。虽然我写这些文章受到了不少好评，但是看到人在公司毕竟有限，而且写这些文章也花费了我不少精力，所以我要寻找新的动力来继续写下去。所以当时我就从写公司独有的框架转到写公司内和公司外通用的技术框架的分析文章，如spring、ibaties、tomcat等jvm技术。并且找机会把它投到外面的杂志和网站上，一方面可以有一些经济回报，另外更重要的是收到更多的反馈信息，最终在developerworks上投了十几篇文章，而且还获得他们网站的最受欢迎作者，目前我写的文章估计也是developerworks上单篇访问量最大的。\n\n所以善与从工作中找到源动力非常重要，做一件事情时从不同角度发现其中的价值可以始终保持对做事的激情，比如如果我这个事情做好后，可以得到别人的感谢、可以获得别人的称赞、可以获得更多的人的认可，可以获得更多的知识等。找到我把事情做好可以获得这正向的反馈，附带获得知识和影响力，然后促使我更想持续的把事情做好。\n\n其实写文章和总结一直是我工作中的一个兴奋点，他会有多种好处：\n\n1. 可以系统性的把自己的学到的知识进行沉淀和总结，只有经过沉淀和总结的知识才能被更长远的记住。\n\n2. 可以增加自己的影响力，因为更多的分享给别人带来价值，才有有人关注你\n\n3. 给做事增加动力，尤其是那些琐碎的事情。如果能把琐碎的事情都连接起来也是很好的结果\n\n所以要找到你工作中的兴奋点，可以使你持续的对工作充满激情。\n\n与人协作\n在与人协作上，这几年我的感触夜很深，从最初的想一个人完成所有事情，到现在尽量让别人完成所有事情，这种转变真是很特别，现在回过来头再看新来的同学的表现，使得我把我的转变过程写出来分享给大家。在公司中有很少的事情是由一个人完成的，所以大部分都是有团队协作的，除去有不同的工种差别外，很有相同岗位不同层级之间的差异。以公司中常用的项目运作模式为例，一个项目中一般会有一个项目经理（PM）、一个或者多个架构师、然后就是若干个不同功能的开发，其他就是不同的岗位分工了如PD、UED、测试、PE等这些人。PM和架构师两个角色刚好给两个同质的团队提供一个很好的选择，PM一般会拿到业务结果，而架构师一般能体现这个项目中的技术成果，典型的场景是一个很好的技术通过PM来落地就能达到双赢。与人协助上有几个阶段需要经历：\n\n1. 别人的想法当成自己的想法，帮别人实现。很简单，初期与人合作的时候，要把别人的事当作自己的事，并且想方设法实现好，该做螺丝钉的时候也要做好。\n\n2. 必须经历自己的想法自己实现的阶段。新人一般会经历害怕把自己的想法说出来，被别人抢去实现了的担心。回想起来我也担心过，实际在工作中的确有些同学善与盗取别人的想法然后稍微换一下再到处给别人宣扬是自己的观点，尤其是再抢着给老板汇报就更讨厌了，但现在想想这种担心也没有必要，因为更重要的不是想法而是实践。对新同学来说，多想少说多实践才是王道，千万不要少想多说少实践。如果你有好的想法不妨说出来，并且实现出来一个demo证明可行性，如果证明靠谱也不用纠结最终名义上的结果是不是你能获得，就像我前面所说的，先做好事，不用急着去争名，这个时候正是你积累以后给你福报的时候。\n\n3. 自己的想法找一帮人帮实现出来。这个阶段最重要的就是平衡利益的时候，合理的让每个项目成员都能获得最大的利益是项目成功的关键，不仅仅是参与项目的成员还包括项目成员的老板，仅仅把事情做好还只是第一步，项目要发挥出最大的价值，还有有老板们帮你宣传，才能有更多的落地场景，最终的成功需要天时地利人和，很不容易。\n\n4. 自己的想法，让别人说出来，并且实现。你的想法变成了别人的想法，并且最后实现了出来，如果你到了这个阶段，那么你肯定已经是一个很有影响力的人了。新人无疑最忌讳出现这个情况，但是如何你前面几个阶段都做的很好，那么你遇到这种情况你会很淡定，因为这时你应该是一个Leader了，而Leader要做的正是这个。\n\n与人协作时我觉得《choice》课程中介绍的影响力金字塔如何达到建立最有效的关系，是非常有参考价值的地方，把最大时间花在对与合作伙伴能够产生影响的人建立良好关系上是最有成效的，这个大家可能会说，不就是那群天天在公司不干事只会拉关系的人吗？其实建立关系只是一个手段，真正的是建立关系能够产生什么的结果才是最终的目的，影响力是最有效的一种协作。\n\n老板希望你做的\n今年带了一年的团队，也算打入了组织内部了解组织是怎么运转的，阿里总体还是一个健康的组织，判断一个组织有没有生命力就看这个组织的Leader是不是最能干的人，而且组织要有能够保证最能干的人能够成为Leader的机制。\n\n当然我主要想讲的不是如何给老板拍马屁、如何和老板套近乎，介绍给大家主管最希望的做事方式：\n\n1. 第一步要和主管取得相互信任，注意我说的是相互信任，这个最重要。你信任主管无非关注几点，你内心是服他的；你知道他是真心愿意培养你的。主管信任你主要是交给你的事情能够漂亮的完成；认为你死心塌地的跟着他。有很多的管理事故无非都是这种相互信任没有建立导致的（当然这些都是基于你和老板都是符合阿里价值观的，有些心理黑暗的就或略了）。\n\n2. 积极主动的给老板带来一些惊喜，是你获得更多机会的助燃剂，老板一般喜欢两种人，一种是听话的人，兢兢业业的完成交给的任务；第二种人是总是有新想法并且爱折腾的人，有想法还不够，最好是有结果。很显然第二种人更容易获得老板的提拨\n\n3. 适当的给老板找些“麻烦”也是有好处的，这里所谓的找麻烦有两重含义：\n\n一是，要有自己独立的观点，即当发现明显有问题时还听之任之，只会让你的老板觉得你没有主见，积极的表达自己的观点，当然这个要基于大家都是正直的人的基础上，如果你的老板是一个小肚鸡肠的人，那你还说好自为之吧。\n\n二是，尽量不要让你老板的认知范围完全覆盖你的认知如下图所示，如果这样的话，你在你老板眼里就是一个透明人，因为你的所有思考和行动都在他的可预知范围内，那样的话对你很难有很大的期待了。所以在工作场景中用到的知识的深度、广度或者其他技能上你要有所长。比如技能上你擅长前端技术或者及线上运维非常好或者你思考问题非常全面，或者你逻辑推导能力很好，如果能达到下图中是一种比较理想的状态。当然有种情况也要避免，就是当你掌握的知识如果大于你的老板的话，你可能会觉得老板不如你，但是千万不要忘了，他的推理范围可能还是远远覆盖你，也就是对事情的判断能力，所以也不要过于自大。\n\n当然有句话说：跟对一个好老板是你一生的福报，的确是这样，以我目前的观察，公司目前那些名老板都是那种情商很高但是内心真正简单透明的人，职场的权术有很多，但是仅仅靠权术很难真正获得长久的成功。\n\n不管你是一个刚才学习毕业的人还是一个牛逼大咖加入到一个新的环境，前期所有的精力都应该放到具体的小事情上，第一步做好以事服人，后面再以德服人我觉得是一个比较好成长思路。\n","source":"_posts/7年老人谈些新人成长经验.md","raw":"title: 7年老人谈些新人成长经验\ndate: 2016-05-05 21:21:38\ncategories:\ntags:\n---\n在阿里差不多快7个年头了，这7年中自己的确也学到了很多，这其中有我自己的切身感受也有些通过观察别人总结的一些经验，去年的时候团队新人经常问我的，一直想写没写，在那么多的答案中，可能我觉得比较有价值的分享给大家，这些也不一定都对，但是对我来说都是真心想说的话。这些话有些包括我自己也不一定都实践的很好，也在不停的学习中，但还是要先具备这种意识才行。\n\n先做事\n有很多新同学刚过来，有很多困惑，到底是做技术还是做业务？是每天加班加点写代码还是周末要空点时间来看书学习？是先追求广度还是先钻研一门技术？是两耳不闻窗外事的一心埋头做事还是和同事打成一片参加各种活动？等等这些问题也曾经困扰了我，差不多以一个过来人的角度再回头看一下我的一些理解。\n\n<!--more-->\n\n其实我觉得新人到一个团队最关键的是在前3年建立起个人品牌，为什么？我觉得其中有些逻辑可以和大家分享下，当别人对你完全不了解的情况下，你做的第一件事是非常重要的。很多情况下你给别人留下的印象会蔓延到整个公司，所以交给你的第一件事情一定要做好，怎么才叫做好，在目前这个职场中，其实根本就不需要比拼大家智商的时候，大部分情况下，做事认真一点、考虑的更深入一点、积极主动一点这几点都做好，你基本已经好于70%的同学了，好于70%的同学我们都称之为“靠谱”。把每件事情做好，并且在当中建立起自己的分别心，比如做技术的，要在某一方面成为一个团队的专家，在这个领域要成为权威，目标就是做出一件令人佩服的成果，逐渐建立起自己的影响力。\n\n获得了合作伙伴包括主管的认可，自然获得的机会就会更多，做的事情也会越复杂，你的合作伙伴以及和你一起做的小伙伴也会越来越强，这样就会形成正循环，你的成长就会比较快。所以前3年通过做事形成自己的影响力，积累自己的人脉。锻炼自己的对未知事物的判断能力，因为随着你做的事情越来越多，你的专业知识能够覆盖度就会越来越少，你会遇到越来越多的你不懂的领域。但是你不可能把你所有不知道的知识都掌握一遍，所以培养自己的判断能力就非常重要了，这个判断包括对事物未知发展方向的判断、事情产生价值的判断、以及对人的判断等。\n\n所谓后3年做人，是更多的发挥出人的价值，不仅仅把事做好就行，包括在合适的时间做合适的事情可以产生更大的价值，在公司里做先烈的情况有很多；找到多个团队的共同价值点把事情一起做好，其实这个最难，因为越有价值的事情，涉及到的利益方也会越多，所以平衡好各个利益方的诉求是事情成败的关键；事情做好后还要有影响力的人帮你宣传等。这个当中可能会涉及到人的性格、交际能力、向上管理等综合能力（这个需要很高的情商我也不擅长，也在学习中，就不详谈了，呵呵）。\n\n善与发现兴奋点\n新同学刚入职时，一般所做事情的难度都不大，这个时候很容易会形成落差，像阿里目前招的都是学校里面的尖子，但是有时候到岗位上后发现每天做的事情都是一些琐碎的事，所以会感到失望。如果长期不调整好心态后很难把自己的工作激情发挥出来，所以也就慢慢平庸下去。我可以说一下我在阿里的一些经验，当初我和大部分同学一样，一开始也是从最基本的日常开始做起，当时我对做这些事情的自己的要求是，代码层面不出bug、注释要写清楚，按时发布，这些都是最基本的要求；但是我会利用业余时间做好几件事情：\n\n1. 发现工作中可以提升效率的地方，可以把琐事的事情工具化，我记得当时在做一个搜索需求时，发现传给搜索的参与非常多，而且每次拼URL非常麻烦，而且这个是给运营同学在用，所以我就做了一个页面，把每个参数做成表单，然后运营同学只要在对应的字段（自动的含义有说明）表单中填入值，就可以自动生成最终的URL。提升了运营同学生成URL的效率。当然做出来后，也肯定受到了运营同学的好评。\n\n2. 除了发现工作中可以提升的效率外，还可以积累一些人品，比如当时我们有个小图书馆，有个同学需要记录每周每个同学借了那些书，什么时候还等信息，这些还都是人肉记录的方式，所以我当时就做了个图书管理系统给那个同学用，当时也积累不少人品。\n\n3. 除了在主动性和积累人品外，最重要的还是要积累自己的技能，我会把在公司用到的中间件都深入学习一遍，并且写成学习文档，和其他同学写那种简单的使用心得型的文档不同，我写的学习文档都是分析设计原理性的，更多的分析为什么这么设计，用到了哪些设计模式、关键的技术点分析这些；这种文章对那些工作几年对中间件熟悉的同学也会有兴趣来看。虽然我写这些文章受到了不少好评，但是看到人在公司毕竟有限，而且写这些文章也花费了我不少精力，所以我要寻找新的动力来继续写下去。所以当时我就从写公司独有的框架转到写公司内和公司外通用的技术框架的分析文章，如spring、ibaties、tomcat等jvm技术。并且找机会把它投到外面的杂志和网站上，一方面可以有一些经济回报，另外更重要的是收到更多的反馈信息，最终在developerworks上投了十几篇文章，而且还获得他们网站的最受欢迎作者，目前我写的文章估计也是developerworks上单篇访问量最大的。\n\n所以善与从工作中找到源动力非常重要，做一件事情时从不同角度发现其中的价值可以始终保持对做事的激情，比如如果我这个事情做好后，可以得到别人的感谢、可以获得别人的称赞、可以获得更多的人的认可，可以获得更多的知识等。找到我把事情做好可以获得这正向的反馈，附带获得知识和影响力，然后促使我更想持续的把事情做好。\n\n其实写文章和总结一直是我工作中的一个兴奋点，他会有多种好处：\n\n1. 可以系统性的把自己的学到的知识进行沉淀和总结，只有经过沉淀和总结的知识才能被更长远的记住。\n\n2. 可以增加自己的影响力，因为更多的分享给别人带来价值，才有有人关注你\n\n3. 给做事增加动力，尤其是那些琐碎的事情。如果能把琐碎的事情都连接起来也是很好的结果\n\n所以要找到你工作中的兴奋点，可以使你持续的对工作充满激情。\n\n与人协作\n在与人协作上，这几年我的感触夜很深，从最初的想一个人完成所有事情，到现在尽量让别人完成所有事情，这种转变真是很特别，现在回过来头再看新来的同学的表现，使得我把我的转变过程写出来分享给大家。在公司中有很少的事情是由一个人完成的，所以大部分都是有团队协作的，除去有不同的工种差别外，很有相同岗位不同层级之间的差异。以公司中常用的项目运作模式为例，一个项目中一般会有一个项目经理（PM）、一个或者多个架构师、然后就是若干个不同功能的开发，其他就是不同的岗位分工了如PD、UED、测试、PE等这些人。PM和架构师两个角色刚好给两个同质的团队提供一个很好的选择，PM一般会拿到业务结果，而架构师一般能体现这个项目中的技术成果，典型的场景是一个很好的技术通过PM来落地就能达到双赢。与人协助上有几个阶段需要经历：\n\n1. 别人的想法当成自己的想法，帮别人实现。很简单，初期与人合作的时候，要把别人的事当作自己的事，并且想方设法实现好，该做螺丝钉的时候也要做好。\n\n2. 必须经历自己的想法自己实现的阶段。新人一般会经历害怕把自己的想法说出来，被别人抢去实现了的担心。回想起来我也担心过，实际在工作中的确有些同学善与盗取别人的想法然后稍微换一下再到处给别人宣扬是自己的观点，尤其是再抢着给老板汇报就更讨厌了，但现在想想这种担心也没有必要，因为更重要的不是想法而是实践。对新同学来说，多想少说多实践才是王道，千万不要少想多说少实践。如果你有好的想法不妨说出来，并且实现出来一个demo证明可行性，如果证明靠谱也不用纠结最终名义上的结果是不是你能获得，就像我前面所说的，先做好事，不用急着去争名，这个时候正是你积累以后给你福报的时候。\n\n3. 自己的想法找一帮人帮实现出来。这个阶段最重要的就是平衡利益的时候，合理的让每个项目成员都能获得最大的利益是项目成功的关键，不仅仅是参与项目的成员还包括项目成员的老板，仅仅把事情做好还只是第一步，项目要发挥出最大的价值，还有有老板们帮你宣传，才能有更多的落地场景，最终的成功需要天时地利人和，很不容易。\n\n4. 自己的想法，让别人说出来，并且实现。你的想法变成了别人的想法，并且最后实现了出来，如果你到了这个阶段，那么你肯定已经是一个很有影响力的人了。新人无疑最忌讳出现这个情况，但是如何你前面几个阶段都做的很好，那么你遇到这种情况你会很淡定，因为这时你应该是一个Leader了，而Leader要做的正是这个。\n\n与人协作时我觉得《choice》课程中介绍的影响力金字塔如何达到建立最有效的关系，是非常有参考价值的地方，把最大时间花在对与合作伙伴能够产生影响的人建立良好关系上是最有成效的，这个大家可能会说，不就是那群天天在公司不干事只会拉关系的人吗？其实建立关系只是一个手段，真正的是建立关系能够产生什么的结果才是最终的目的，影响力是最有效的一种协作。\n\n老板希望你做的\n今年带了一年的团队，也算打入了组织内部了解组织是怎么运转的，阿里总体还是一个健康的组织，判断一个组织有没有生命力就看这个组织的Leader是不是最能干的人，而且组织要有能够保证最能干的人能够成为Leader的机制。\n\n当然我主要想讲的不是如何给老板拍马屁、如何和老板套近乎，介绍给大家主管最希望的做事方式：\n\n1. 第一步要和主管取得相互信任，注意我说的是相互信任，这个最重要。你信任主管无非关注几点，你内心是服他的；你知道他是真心愿意培养你的。主管信任你主要是交给你的事情能够漂亮的完成；认为你死心塌地的跟着他。有很多的管理事故无非都是这种相互信任没有建立导致的（当然这些都是基于你和老板都是符合阿里价值观的，有些心理黑暗的就或略了）。\n\n2. 积极主动的给老板带来一些惊喜，是你获得更多机会的助燃剂，老板一般喜欢两种人，一种是听话的人，兢兢业业的完成交给的任务；第二种人是总是有新想法并且爱折腾的人，有想法还不够，最好是有结果。很显然第二种人更容易获得老板的提拨\n\n3. 适当的给老板找些“麻烦”也是有好处的，这里所谓的找麻烦有两重含义：\n\n一是，要有自己独立的观点，即当发现明显有问题时还听之任之，只会让你的老板觉得你没有主见，积极的表达自己的观点，当然这个要基于大家都是正直的人的基础上，如果你的老板是一个小肚鸡肠的人，那你还说好自为之吧。\n\n二是，尽量不要让你老板的认知范围完全覆盖你的认知如下图所示，如果这样的话，你在你老板眼里就是一个透明人，因为你的所有思考和行动都在他的可预知范围内，那样的话对你很难有很大的期待了。所以在工作场景中用到的知识的深度、广度或者其他技能上你要有所长。比如技能上你擅长前端技术或者及线上运维非常好或者你思考问题非常全面，或者你逻辑推导能力很好，如果能达到下图中是一种比较理想的状态。当然有种情况也要避免，就是当你掌握的知识如果大于你的老板的话，你可能会觉得老板不如你，但是千万不要忘了，他的推理范围可能还是远远覆盖你，也就是对事情的判断能力，所以也不要过于自大。\n\n当然有句话说：跟对一个好老板是你一生的福报，的确是这样，以我目前的观察，公司目前那些名老板都是那种情商很高但是内心真正简单透明的人，职场的权术有很多，但是仅仅靠权术很难真正获得长久的成功。\n\n不管你是一个刚才学习毕业的人还是一个牛逼大咖加入到一个新的环境，前期所有的精力都应该放到具体的小事情上，第一步做好以事服人，后面再以德服人我觉得是一个比较好成长思路。\n","slug":"7年老人谈些新人成长经验","published":1,"updated":"2016-05-05T13:25:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vmu002icn8euusvaggi"},{"title":"2016年目标与计划","date":"2016-01-01T06:32:08.000Z","toc":true,"_content":"***新的一年开始了，给自己制定一年必须达成的目标，加油！***\n#目标\n1. 坚持健身，年末达到连续引体向上60下，加强胸肌和腹肌\n2. 基金定投，资产合理配置，放一些到股市、港股\n3. 争取见丈母娘\n4. 读开源项目源码：\n`` [ ] dubbo ``\n`` [ ] rocketMq ``\n`` [ ] j2cache ``\n`` [ ] jfinal ``\n`` [ ] zbus ``\n5. 对技术的要求：\n`` [ ] 深入了解rocketMq ``\n`` [ ] 深入了解NIO 使用netty ``\n`` [ ] 掌握redis ``\n6. 读专业书籍\n`` [ ] 人月神话 ``\n`` [ ] 重构，改善既有代码的设计 ``\n`` [ ] 程序员修炼之道-从小工到专家 ``\n`` [ ] 编程珠玑 ``\n`` [ ] 深入理解JVM ``\n7. 读非专业书籍\n`` [ ] 必然 ``\n`` [ ] 投资哲学 ``\n8. 去济州岛自由行\n9. 工作上能够做到独当一面\n\n","source":"_posts/2016年目标与计划.md","raw":"title: 2016年目标与计划\ndate: 2016-01-01 14:32:08\ncategories: 生活\ntags: [技术]\ntoc: true\n---\n***新的一年开始了，给自己制定一年必须达成的目标，加油！***\n#目标\n1. 坚持健身，年末达到连续引体向上60下，加强胸肌和腹肌\n2. 基金定投，资产合理配置，放一些到股市、港股\n3. 争取见丈母娘\n4. 读开源项目源码：\n`` [ ] dubbo ``\n`` [ ] rocketMq ``\n`` [ ] j2cache ``\n`` [ ] jfinal ``\n`` [ ] zbus ``\n5. 对技术的要求：\n`` [ ] 深入了解rocketMq ``\n`` [ ] 深入了解NIO 使用netty ``\n`` [ ] 掌握redis ``\n6. 读专业书籍\n`` [ ] 人月神话 ``\n`` [ ] 重构，改善既有代码的设计 ``\n`` [ ] 程序员修炼之道-从小工到专家 ``\n`` [ ] 编程珠玑 ``\n`` [ ] 深入理解JVM ``\n7. 读非专业书籍\n`` [ ] 必然 ``\n`` [ ] 投资哲学 ``\n8. 去济州岛自由行\n9. 工作上能够做到独当一面\n\n","slug":"2016年目标与计划","published":1,"updated":"2016-03-02T10:58:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vmw002jcn8eccz0gppz"},{"title":"2015开源中国年终盛典","date":"2015-12-13T15:47:09.000Z","toc":false,"_content":"#OSC年终盛典\n早上不到6点就起床出发来国家会议中心了，今天一整天好充实，见到了沈讯，还加了微信好友，不虚此行！\n![开场](2015开源中国年终盛典/osc_3.jpg)\n<!--more-->\n![沈讯讲课](2015开源中国年终盛典/osc_1.jpg)\n![合影](2015开源中国年终盛典/osc_2.jpg)\n","source":"_posts/2015开源中国年终盛典.md","raw":"title: 2015开源中国年终盛典\ndate: 2015-12-13 23:47:09\ncategories: 生活\ntags: [技术交流]\ntoc: false\n---\n#OSC年终盛典\n早上不到6点就起床出发来国家会议中心了，今天一整天好充实，见到了沈讯，还加了微信好友，不虚此行！\n![开场](2015开源中国年终盛典/osc_3.jpg)\n<!--more-->\n![沈讯讲课](2015开源中国年终盛典/osc_1.jpg)\n![合影](2015开源中国年终盛典/osc_2.jpg)\n","slug":"2015开源中国年终盛典","published":1,"updated":"2016-03-09T08:04:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vmy002ncn8e2e3kpwc1"},{"title":"2015年总结","date":"2015-12-31T13:53:18.000Z","toc":false,"_content":"***转眼，一年又过去了，每天上班地铁路上的一小时可以收获很多，列一下今年的读书清单***\n\n1. 《大型分布式网站架构设计与实践》\n2. 《大型网站系统与Java中间件实践》\n3. 《深入分析Java Web》\n4. 《大规模分布式系统架构与设计实战》\n5. 《Java加密与解密的艺术》\n6. 《Java并发编程实战》\n7. 《从Paxos到Zookeeper》\n\n今年的技术类书籍读的还算比较多，从0到1，了解了大型互联网的分布式系统，以及高并发编程的一些细节，同时也简单使用了一些中间件比如zookeeper做了一个简单的分布式调度系统，一年已经过去，明年会更加努力！\n","source":"_posts/2015年总结.md","raw":"title: 2015年总结\ndate: 2015-12-31 21:53:18\ncategories: 职业\ntags: [技术]\ntoc: false\n---\n***转眼，一年又过去了，每天上班地铁路上的一小时可以收获很多，列一下今年的读书清单***\n\n1. 《大型分布式网站架构设计与实践》\n2. 《大型网站系统与Java中间件实践》\n3. 《深入分析Java Web》\n4. 《大规模分布式系统架构与设计实战》\n5. 《Java加密与解密的艺术》\n6. 《Java并发编程实战》\n7. 《从Paxos到Zookeeper》\n\n今年的技术类书籍读的还算比较多，从0到1，了解了大型互联网的分布式系统，以及高并发编程的一些细节，同时也简单使用了一些中间件比如zookeeper做了一个简单的分布式调度系统，一年已经过去，明年会更加努力！\n","slug":"2015年总结","published":1,"updated":"2016-03-09T07:52:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwu69vn7002rcn8emm90veog"}],"PostAsset":[{"_id":"source/_posts/网络通讯/网络通信.jpg","post":"ciwu69vkk0009cn8ek9n0uogg","slug":"网络通信.jpg","modified":1},{"_id":"source/_posts/红烧鲈鱼/yu.jpg","post":"ciwu69vkq000hcn8ekpw10ubc","slug":"yu.jpg","modified":1},{"_id":"source/_posts/互联网金融体系/互联网金融.jpg","post":"ciwu69vlj001mcn8e95l6blse","slug":"互联网金融.jpg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/AVG.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"AVG.jpeg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/COUNT.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"COUNT.jpeg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/COUNT_DISTICT.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"COUNT_DISTICT.jpeg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/MAX.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"MAX.jpeg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/MIN.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"MIN.jpeg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/SUM.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"SUM.jpeg","modified":1},{"_id":"source/_posts/Mysql5-7新特性之json与虚拟索引列/virtual_index.jpeg","post":"ciwu69vm30026cn8epgx15xmz","slug":"virtual_index.jpeg","modified":1},{"_id":"source/_posts/2015开源中国年终盛典/osc_1.jpg","post":"ciwu69vmy002ncn8e2e3kpwc1","slug":"osc_1.jpg","modified":1},{"_id":"source/_posts/2015开源中国年终盛典/osc_2.jpg","post":"ciwu69vmy002ncn8e2e3kpwc1","slug":"osc_2.jpg","modified":1},{"_id":"source/_posts/2015开源中国年终盛典/osc_3.jpg","post":"ciwu69vmy002ncn8e2e3kpwc1","slug":"osc_3.jpg","modified":1}],"PostCategory":[{"post_id":"ciwu69vkb0004cn8edbechd50","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vki0008cn8e2mmimpc0"},{"post_id":"ciwu69vkk0009cn8ek9n0uogg","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vkl000acn8edql1vuoy"},{"post_id":"ciwu69vkq000hcn8ekpw10ubc","category_id":"ciwu69vks000icn8emw9g453g","_id":"ciwu69vkt000lcn8eccs6rgio"},{"post_id":"ciwu69vkx000ocn8em0bmuxtd","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vky000pcn8eiw450w3r"},{"post_id":"ciwu69vl2000ycn8ehdqb6g7q","category_id":"ciwu69vl2000zcn8ejlosk939","_id":"ciwu69vl30012cn8e842qbg1c"},{"post_id":"ciwu69vl50013cn8e3ppn59wg","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vl70014cn8eowp1wcpr"},{"post_id":"ciwu69vla0017cn8erlq7qyr4","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vlb0018cn8e3q66lc9h"},{"post_id":"ciwu69vld001ccn8e50xn3wz1","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vle001dcn8e2ca5arkt"},{"post_id":"ciwu69vlg001hcn8ew8xq01gg","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vlg001icn8ebvkea6a2"},{"post_id":"ciwu69vlj001mcn8e95l6blse","category_id":"ciwu69vl2000zcn8ejlosk939","_id":"ciwu69vlk001ncn8e645vydcx"},{"post_id":"ciwu69vlp001scn8edly43zfk","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vlq001tcn8eiq2jmsqp"},{"post_id":"ciwu69vlu001wcn8egikfvyzu","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vlw001xcn8ep89x1n27"},{"post_id":"ciwu69vm00021cn8ezw4tbaxf","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vm10022cn8ec2v0vwwp"},{"post_id":"ciwu69vm30026cn8epgx15xmz","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vm40027cn8e9t2xyrq0"},{"post_id":"ciwu69vmq002ccn8ezag6i143","category_id":"ciwu69vkf0005cn8esj7mhbuc","_id":"ciwu69vms002dcn8eocbumk9b"},{"post_id":"ciwu69vmw002jcn8eccz0gppz","category_id":"ciwu69vks000icn8emw9g453g","_id":"ciwu69vmx002kcn8e1q6k3bnw"},{"post_id":"ciwu69vmy002ncn8e2e3kpwc1","category_id":"ciwu69vks000icn8emw9g453g","_id":"ciwu69vmz002ocn8emvsspc1v"},{"post_id":"ciwu69vn7002rcn8emm90veog","category_id":"ciwu69vl2000zcn8ejlosk939","_id":"ciwu69vn9002scn8e7bjvpku6"}],"PostTag":[{"post_id":"ciwu69vkb0004cn8edbechd50","tag_id":"ciwu69vkg0006cn8e0y51zdfv","_id":"ciwu69vki0007cn8e3lhrq9o0"},{"post_id":"ciwu69vkk0009cn8ek9n0uogg","tag_id":"ciwu69vkl000bcn8epct01nw2","_id":"ciwu69vkl000ecn8e16w1mjsw"},{"post_id":"ciwu69vkk0009cn8ek9n0uogg","tag_id":"ciwu69vkl000ccn8e8tffwd8h","_id":"ciwu69vkm000fcn8eslv2ntht"},{"post_id":"ciwu69vkk0009cn8ek9n0uogg","tag_id":"ciwu69vkl000dcn8eq480mw96","_id":"ciwu69vkm000gcn8eiskyq32t"},{"post_id":"ciwu69vkq000hcn8ekpw10ubc","tag_id":"ciwu69vks000jcn8e9vfoovfw","_id":"ciwu69vkt000mcn8ebduozkrx"},{"post_id":"ciwu69vkq000hcn8ekpw10ubc","tag_id":"ciwu69vks000kcn8ebr1igy7s","_id":"ciwu69vkt000ncn8e8x15899m"},{"post_id":"ciwu69vkx000ocn8em0bmuxtd","tag_id":"ciwu69vky000qcn8eno8zek9j","_id":"ciwu69vl0000ucn8e6ivbf3r5"},{"post_id":"ciwu69vkx000ocn8em0bmuxtd","tag_id":"ciwu69vky000rcn8ei6qqnfc8","_id":"ciwu69vl0000vcn8emzgnsjia"},{"post_id":"ciwu69vkx000ocn8em0bmuxtd","tag_id":"ciwu69vkz000scn8egjdktj4j","_id":"ciwu69vl0000wcn8enfrula12"},{"post_id":"ciwu69vkx000ocn8em0bmuxtd","tag_id":"ciwu69vkz000tcn8eczjjimia","_id":"ciwu69vl0000xcn8e2ka3uqfb"},{"post_id":"ciwu69vl2000ycn8ehdqb6g7q","tag_id":"ciwu69vl20010cn8e4icqkxxx","_id":"ciwu69vl30011cn8etwkrh1cw"},{"post_id":"ciwu69vl50013cn8e3ppn59wg","tag_id":"ciwu69vl70015cn8ep1aixkl3","_id":"ciwu69vl80016cn8ewj40mgug"},{"post_id":"ciwu69vla0017cn8erlq7qyr4","tag_id":"ciwu69vlb0019cn8e0b8uffxc","_id":"ciwu69vlb001acn8e28xaw4r8"},{"post_id":"ciwu69vla0017cn8erlq7qyr4","tag_id":"ciwu69vkg0006cn8e0y51zdfv","_id":"ciwu69vlb001bcn8enf389ive"},{"post_id":"ciwu69vld001ccn8e50xn3wz1","tag_id":"ciwu69vkg0006cn8e0y51zdfv","_id":"ciwu69vle001fcn8ejch6fltn"},{"post_id":"ciwu69vld001ccn8e50xn3wz1","tag_id":"ciwu69vle001ecn8e0kdjg9fs","_id":"ciwu69vlf001gcn8e6xg25new"},{"post_id":"ciwu69vlg001hcn8ew8xq01gg","tag_id":"ciwu69vkl000bcn8epct01nw2","_id":"ciwu69vlh001kcn8eeooz0wgc"},{"post_id":"ciwu69vlg001hcn8ew8xq01gg","tag_id":"ciwu69vlh001jcn8ese5n9sb5","_id":"ciwu69vlh001lcn8ekshivcyu"},{"post_id":"ciwu69vlj001mcn8e95l6blse","tag_id":"ciwu69vlk001ocn8e1wehm3c2","_id":"ciwu69vll001qcn8exp2yjglj"},{"post_id":"ciwu69vlj001mcn8e95l6blse","tag_id":"ciwu69vll001pcn8emmi1dbpt","_id":"ciwu69vll001rcn8esgykeqf0"},{"post_id":"ciwu69vlp001scn8edly43zfk","tag_id":"ciwu69vlr001ucn8ea48xj9np","_id":"ciwu69vlr001vcn8e1malwwju"},{"post_id":"ciwu69vlu001wcn8egikfvyzu","tag_id":"ciwu69vlw001ycn8eot2o8zgz","_id":"ciwu69vlw001zcn8e9etywlq3"},{"post_id":"ciwu69vlu001wcn8egikfvyzu","tag_id":"ciwu69vlh001jcn8ese5n9sb5","_id":"ciwu69vlx0020cn8er66uuz54"},{"post_id":"ciwu69vm00021cn8ezw4tbaxf","tag_id":"ciwu69vkl000bcn8epct01nw2","_id":"ciwu69vm20024cn8elr9xyjd7"},{"post_id":"ciwu69vm00021cn8ezw4tbaxf","tag_id":"ciwu69vm20023cn8ei5zxlqt9","_id":"ciwu69vm20025cn8et2lui1rr"},{"post_id":"ciwu69vm30026cn8epgx15xmz","tag_id":"ciwu69vm40028cn8etcgnsao3","_id":"ciwu69vm5002acn8er9s3lxsn"},{"post_id":"ciwu69vm30026cn8epgx15xmz","tag_id":"ciwu69vm50029cn8eq0scqg64","_id":"ciwu69vm5002bcn8esfpbtjqz"},{"post_id":"ciwu69vmq002ccn8ezag6i143","tag_id":"ciwu69vms002ecn8earthgz9b","_id":"ciwu69vmt002gcn8e3mpf8x1s"},{"post_id":"ciwu69vmq002ccn8ezag6i143","tag_id":"ciwu69vms002fcn8ex08u0tmd","_id":"ciwu69vmt002hcn8e9df93hfh"},{"post_id":"ciwu69vmw002jcn8eccz0gppz","tag_id":"ciwu69vmx002lcn8eqmxoo961","_id":"ciwu69vmx002mcn8eo9g6i9kb"},{"post_id":"ciwu69vmy002ncn8e2e3kpwc1","tag_id":"ciwu69vmz002pcn8eiu5dgxkl","_id":"ciwu69vmz002qcn8ebgsjweiv"},{"post_id":"ciwu69vn7002rcn8emm90veog","tag_id":"ciwu69vmx002lcn8eqmxoo961","_id":"ciwu69vn9002tcn8ek0cjkiaw"}],"Tag":[{"name":"随笔","_id":"ciwu69vkg0006cn8e0y51zdfv"},{"name":"java","_id":"ciwu69vkl000bcn8epct01nw2"},{"name":"网络","_id":"ciwu69vkl000ccn8e8tffwd8h"},{"name":"通讯","_id":"ciwu69vkl000dcn8eq480mw96"},{"name":"家常菜","_id":"ciwu69vks000jcn8e9vfoovfw"},{"name":"海鲜","_id":"ciwu69vks000kcn8ebr1igy7s"},{"name":"MySQL","_id":"ciwu69vky000qcn8eno8zek9j"},{"name":"索引","_id":"ciwu69vky000rcn8ei6qqnfc8"},{"name":"性能优化","_id":"ciwu69vkz000scn8egjdktj4j"},{"name":"树","_id":"ciwu69vkz000tcn8eczjjimia"},{"name":"阿里巴巴","_id":"ciwu69vl20010cn8e4icqkxxx"},{"name":"存储","_id":"ciwu69vl70015cn8ep1aixkl3"},{"name":"心得","_id":"ciwu69vlb0019cn8e0b8uffxc"},{"name":"hexo","_id":"ciwu69vle001ecn8e0kdjg9fs"},{"name":"分布式","_id":"ciwu69vlh001jcn8ese5n9sb5"},{"name":"脑图","_id":"ciwu69vlk001ocn8e1wehm3c2"},{"name":"互联网金融","_id":"ciwu69vll001pcn8emmi1dbpt"},{"name":"plugins","_id":"ciwu69vlr001ucn8ea48xj9np"},{"name":"zookeeper","_id":"ciwu69vlw001ycn8eot2o8zgz"},{"name":"commons","_id":"ciwu69vm20023cn8ei5zxlqt9"},{"name":"mysql","_id":"ciwu69vm40028cn8etcgnsao3"},{"name":"json","_id":"ciwu69vm50029cn8eq0scqg64"},{"name":"Guava","_id":"ciwu69vms002ecn8earthgz9b"},{"name":"工具","_id":"ciwu69vms002fcn8ex08u0tmd"},{"name":"技术","_id":"ciwu69vmx002lcn8eqmxoo961"},{"name":"技术交流","_id":"ciwu69vmz002pcn8eiu5dgxkl"}]}}